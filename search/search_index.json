{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to streamOS","title":"Home"},{"location":"#welcome-to-streamos","text":"","title":"Welcome to streamOS"},{"location":"api-howto/","text":"How to - APIs General Principles Recursive Contract Construction Setup Flow Operational Flow Modifications and Updates Sample Code General Principles Recursive Contract Construction Constructing objects in streamOS is recursive, start with the lowest in the tree and continue building upwards through the hierarchy. Every reference to a UUID in a POST is an id of an object returned from another POST statement. streamOS maintains a factory that it references for all of these objects and links them together on run time. The Parent Contract is your ultimate tie in to the customer, so until the Parent Contract is created - contracts are orphans. Plans and Contracts can be reused - so once created you can use them over and over in other create objects for free, by just referencing the id. Overall Setup Flow The overall flow of creation follows this pattern: Create Customers: Create all the customers in streamOS appropriately and store the streamOS customer_ids Create Products: Create all the customers in streamOS appropriately and store the streamOS customer_ids Create Contracts: Create the appropriate contract structure that represent your contracts, verify using the UI if required Operational Flow Structure Usage: Ensure your usage flow is of the format specified in the /contracts/org_id/usage endpoint Get Charges: Every update of usage or a contract upload / update triggers a run of the contracts - use the charges endpoint to get the results. Force a contract run: if you want to force a contract run trigger this Modifications & Updates Modifying Contracts: Modifying contracts in streamOS is tantamount to creating a new contract. You would provide the same information as you did during contract creation to the same endpoint, except for the information that you are changing. Ensure you use the same id as the object you are replacing so that the system knows to replace existing references to it. Modifying Plans: Plans are modified in a similar fashion - post the modified information to the same endpoint with the same id to replace a plan definition. However, now that a plan has been changed - call the refresh endpoint to ensure that all contracts that reference this plan update their local copies of the plan. Sample Code import pytest from flask import json from app import app from schema import input, output import uuid import os org_id = <YOUR_ORG_ID> auth_token = None @pytest.fixture def client(): global auth_token app.config['TESTING'] = True with app.test_client() as client: if auth_token is None: response = client.post('/login', json={'username':<USERNAME>, 'password': <PASSWORD>}) auth_token = response.json['access_token'] client.environ_base['HTTP_AUTHORIZATION'] = f'Bearer {auth_token}' yield client #test cases for the /plans/fixedfees endpoint def test_fixed_fee_no_input(client): response = client.post(f'/contracts/{org_id}/plans/fixedfee', json={}) assert response.status_code == 400 def test_fixed_fee_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/plans/fixedfee', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_fixed_fee_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Fixed Fee\", \"amount\": 100.0, \"period\": None # Add other required fields according to your FixedFeeSchema } response = client.post(f'{prefix}/contracts/{org_id}/plans/fixedfee', json=valid_input) assert response.status_code == 201 assert 'amount' in response.json assert 'id' in response.json assert 'display_name' in response.json assert response.json['amount'] == 100.0 assert response.json['display_name'] == 'Test Fixed Fee' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] # Test cases for the /plans/tier endpoint def test_tier_no_input(client): response = client.post(f'/contracts/{org_id}/plans/tier', json={}) assert response.status_code == 400 def test_tier_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/plans/tier', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_tier_invalid_start_value(client): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Tier\", \"tiers\": [[1, 100, 0.1], [101, None, 0.2]], \"pricing_type\": 1, \"period\": \"1D\" # Add other required fields according to your TierSchema } response = client.post(f'/contracts/{org_id}/plans/tier', json=valid_input) assert response.status_code == 400, f'Received: {response.json}' def test_tier_invalid_end_value(client): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Tier\", \"tiers\": [[0, 100, 0.1], [101, 201, 0.2]], \"pricing_type\": 1, \"period\": \"1D\" # Add other required fields according to your TierSchema } response = client.post(f'/contracts/{org_id}/plans/tier', json=valid_input) assert response.status_code == 400 def test_tier_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Tier\", \"tiers\": [[0, 100, 0.1], [101, None, 0.2]], \"pricing_type\": 1 # Add other required fields according to your TierSchema } response = client.post(f'{prefix}/contracts/{org_id}/plans/tier', json=valid_input) assert response.status_code == 201 # Assuming the response includes a UUID assert 'id' in response.json # Further assertions can be added to validate the UUID format or other response details return response.json['id'] # Test cases for the /modifiers/discounts endpoint def test_discount_no_input(client): response = client.post(f'/contracts/{org_id}/modifiers/discounts', json={}) assert response.status_code == 400 def test_discount_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/modifiers/discounts', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_discount_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Discount\", \"percentage\": 10.0, \"threshold\": 100.0 # Add other required fields according to your DiscountSchema } response = client.post(f'{prefix}/contracts/{org_id}/modifiers/discounts', json=valid_input) assert response.status_code == 201 # Assuming the response includes a UUID assert 'id' in response.json assert 'percentage' in response.json assert 'threshold' in response.json # Further assertions can be added to validate the UUID format or other return response.json['id'] def test_billing_frequency_no_input(client): response = client.post(f'/contracts/{org_id}/modifiers/billing_frequency', json={}) assert response.status_code == 400 def test_billing_frequency_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/modifiers/billing_frequency', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_billing_frequency_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Billing Frequency\", \"type\": 1, \"interval\": 1, \"frequency\": \"D\", \"anchor\": \"S\", \"eq\": False # Add other required fields according to your BillingFrequencySchema } response = client.post(f'{prefix}/contracts/{org_id}/modifiers/billing_frequency', json=valid_input) assert response.status_code == 201 # Assuming the response includes a UUID assert 'id' in response.json assert 'display_name' in response.json assert 'type' in response.json assert 'interval' in response.json assert 'frequency' in response.json assert 'anchor' in response.json assert 'eq' in response.json # Further assertions can be added to validate the UUID format or other response details return response.json['id'] def test_billing_frequency_sim_dates(client): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Billing Frequency\", \"type\": 1, \"interval\": 1, \"frequency\": \"M\", \"anchor\": \"S\", \"eq\": False, \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\" # Add other required fields according to your BillingFrequencySchema } response = client.post(f'/contracts/{org_id}/modifiers/billing_frequency/sim_dates', json=valid_input) assert response.status_code == 200, f'Received: {response.json}' # Assuming the response includes a UUID assert 'dates' in response.json, f'Received: {response.json}' def test_minimum_no_input(client): response = client.post(f'/contracts/{org_id}/modifiers/minimums', json={}) assert response.status_code == 400 def test_minimum_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/modifiers/minimums', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_minimum_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Minimum\", \"amount\": 100.0 # Add other required fields according to your MinimumSchema } response = client.post(f'{prefix}/contracts/{org_id}/modifiers/minimums', json=valid_input) assert response.status_code == 201 # Assuming the response includes a UUID assert 'id' in response.json # Further assertions can be added to validate the UUID format or other response details return response.json['id'] #test cases for the /contracts/productcontract endpoint def test_product_pricing_no_input(client): response = client.post(f'/contracts/{org_id}/productcontract', json={}) assert response.status_code == 400 assert response.json == {'message': 'No input data provided'} def test_product_pricing_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/productcontract', json=invalid_input) assert response.status_code == 422, f'Received: {response.json}' # Further assertions can be added based on specific validation error messages def test_product_pricing_success(client, prefix=''): # Assuming valid input structure for demonstration tier_uuid = test_tier_success(client, prefix) billing_uuid = test_billing_frequency_success(client, prefix) valid_input = { \"display_name\": \"Test Product Contract\", \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\", \"billing_frequency\": billing_uuid, \"tiers\": tier_uuid, \"product_id\": uuid.uuid4() # Add other required fields according to your ProductContractSchema } response = client.post(f'{prefix}/contracts/{org_id}/productcontract', json=valid_input) assert response.status_code == 201, f'Received: {response.json}' # Assuming the response includes a UUID assert 'id' in response.json, f'Received: {response.json}' assert 'billing_frequency' in response.json, f'Received: {response.json}' assert 'tiers' in response.json, f'Received: {response.json}' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] #testcases for the /contracts/subcontract endpoint def test_subcontract_no_input(client): response = client.post(f'/contracts/{org_id}/subcontract', json={}) assert response.status_code == 400 assert response.json == {'message': 'No input data provided'} def test_subcontract_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/subcontract', json=invalid_input) assert response.status_code == 422, f'Received: {response.json}' # Further assertions can be added based on specific validation error messages def test_subcontract_bad_objects(client): # Assuming valid input structure for demonstration billing_frequency_uuid = test_billing_frequency_success(client) valid_input = { \"display_name\": \"Test Subcontract\", \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\", \"billing_frequency\": billing_frequency_uuid, \"minimums\": uuid.uuid4(), \"discounts\": uuid.uuid4(), \"product_contracts\": [uuid.uuid4()], \"fixed_fees\": [uuid.uuid4()], \"sub_contracts\": [uuid.uuid4()], \"override_underlying\": False # Add other required fields according to your ContractSchema } response = client.post(f'/contracts/{org_id}/subcontract', json=valid_input) assert response.status_code == 422, f'Received: {response.json}' def test_subcontract_success(client, prefix=''): # Assuming valid input structure for demonstration minimum_uuid = test_minimum_success(client, prefix) discount_uuid = test_discount_success(client, prefix) product_contract_uuid = test_product_pricing_success(client, prefix) fixed_fee_uuid = test_fixed_fee_success(client, prefix) billing_frequency_uuid = test_billing_frequency_success(client, prefix) credit_uuid = test_credit_success(client, prefix) valid_input = { \"display_name\": \"Test Subcontract\", \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\", \"billing_frequency\": billing_frequency_uuid, \"minimums\": minimum_uuid, \"discounts\": discount_uuid, \"product_contracts\": [product_contract_uuid], \"fixed_fees\": [fixed_fee_uuid], \"credits\": credit_uuid, \"override_underlying\": False # Add other required fields according to your ContractSchema } response = client.post(f'{prefix}/contracts/{org_id}/subcontract', json=valid_input) assert response.status_code == 201, f'Received: {response.json}' # Assuming the response includes a UUID assert 'id' in response.json, f'Received: {response.json}' assert 'billing_frequency' in response.json, f'Received: {response.json}' assert 'minimums' in response.json, f'Received: {response.json}' assert 'discounts' in response.json, f'Received: {response.json}' assert 'product_contracts' in response.json, f'Received: {response.json}' assert 'fixed_fees' in response.json, f'Received: {response.json}' assert 'credits' in response.json, f'Received: {response.json}' assert response.json['display_name'] == 'Test Subcontract', f'Received: {response.json}' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] #testcases for the /contracts/parentcontract endpoint def test_parent_contract_no_input(client): response = client.post(f'/contracts/{org_id}/parentcontract', json={}) assert response.status_code == 400 assert response.json == {'message': 'No input data provided'} def test_parent_contract_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/parentcontract', json=invalid_input) assert response.status_code == 422, f'Received: {response.json}' # Further assertions can be added based on specific validation error messages def test_parent_contract_success(client, prefix=''): # Assuming valid input structure for demonstration product_contract_uuid = test_product_pricing_success(client, prefix) fixed_fee_uuid = test_fixed_fee_success(client, prefix) sub_contract_uuid = test_subcontract_success(client, prefix) billing_frequency_uuid = test_billing_frequency_success(client, prefix) credit_uuid = test_credit_success(client, prefix) valid_input = { \"organization_id\": org_id, \"customer_id\": uuid.uuid4(), \"display_name\": \"Test Parent Contract\", \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\", \"billing_frequency\": billing_frequency_uuid, \"product_contracts\": [product_contract_uuid], \"credits\": credit_uuid, \"fixed_fees\": [fixed_fee_uuid], \"sub_contracts\": [sub_contract_uuid], \"override_underlying\": False # Add other required fields according to your ParentContractSchema } response = client.post(f'{prefix}/contracts/{org_id}/parentcontract', json=valid_input) assert response.status_code == 201, f'Received: {response.json}' # Assuming the response includes a UUID assert 'id' in response.json, f'Received: {response.json}' assert 'billing_frequency' in response.json, f'Received: {response.json}' assert 'product_contracts' in response.json, f'Received: {response.json}' assert 'fixed_fees' in response.json, f'Received: {response.json}' assert 'sub_contracts' in response.json, f'Received: {response.json}' assert 'credits' in response.json, f'Received: {response.json}' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] def test_credit_no_input(client): response = client.post(f'/contracts/{org_id}/modifiers/credits', json={}) assert response.status_code == 400 assert response.json == {'message': 'No input data provided'} def test_credit_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/modifiers/credits', json=invalid_input) assert response.status_code == 422, f'Received: {response.json}' # Further assertions can be added based on specific validation error messages def test_credit_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Credit\", \"amount\": 100.0, \"expiry\": \"1Y\" # Add other required fields according to your CreditSchema } response = client.post(f'{prefix}/contracts/{org_id}/modifiers/credits', json=valid_input) assert response.status_code == 201, f'Received: {response.json}' # Assuming the response includes a UUID assert 'id' in response.json, f'Received: {response.json}' assert 'expiry' in response.json, f'Received: {response.json}' assert 'display_name' in response.json, f'Received: {response.json}' assert 'amount' in response.json, f'Received: {response.json}' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] def test_get_credits(client): credit_uuid = test_credit_success(client) response = client.get(f'/contracts/{org_id}/modifiers/credits') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == credit_uuid, f'Received: {response.json}' def test_get_credit_success(client): credit_uuid = test_credit_success(client) response = client.get(f'/contracts/{org_id}/modifiers/credit/{credit_uuid}') assert response.status_code == 200 assert response.json['id'] == credit_uuid, f'Received: {response.json}' assert response.json['display_name'] == 'Test Credit', f'Received: {response.json}' assert response.json['amount'] == 100.0, f'Received: {response.json}' assert response.json['expiry'] == '1Y', f'Received: {response.json}' def test_tiers(client): tier_uuid = test_tier_success(client) response = client.get(f'/contracts/{org_id}/plans/tiers') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == tier_uuid, f'Received: {response.json}' def test_nonexistent_tier(client): uuid = '00000000-0000-0000-0000-000000000000' response = client.get(f'/contracts/{org_id}/plans/tier/{uuid}') assert response.status_code == 404 def test_get_tier_success(client): tier_ = test_tier_success(client) response = client.get(f'/contracts/{org_id}/plans/tier/{tier_}') assert response.status_code == 200 assert response.json['id'] == tier_, f'Received: {response.json}' assert response.json['display_name'] == 'Test Tier', f'Received: {response.json}' assert response.json['tier'] == [[0, 100, 0.1], [101, None, 0.2]], f'Received: {response.json}' assert response.json['pricing_type'] == 1, f'Received: {response.json}' #test cases for the /plans/fixedfees endpoint GET method def test_get_empty_fixed_fees(client): response = client.get(f'/contracts/{org_id}/plans/fixedfees') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 0, f'Received: {response.json}' def test_nonexistent_fixed_fee(client): uuid = '00000000-0000-0000-0000-000000000000' response = client.get(f'/contracts/{org_id}/plans/fixedfee/{uuid}') assert response.status_code == 404 def test_get_fixed_fee_success(client): fixed_fee_uuid = test_fixed_fee_success(client) response = client.get(f'/contracts/{org_id}/plans/fixedfee/{fixed_fee_uuid}') assert response.status_code == 200 assert response.json['id'] == fixed_fee_uuid, f'Received: {response.json}' assert response.json['amount'] == 100.0, f'Received: {response.json}' assert response.json['period'] == None, f'Received: {response.json}' assert response.json['display_name'] == 'Test Fixed Fee', f'Received: {response.json}' def test_fixed_fees(client): fixed_fee_uuid = test_fixed_fee_success(client) response = client.get(f'/contracts/{org_id}/plans/fixedfees') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == fixed_fee_uuid, f'Received: {response.json}' def test_get_discount_success(client): discount_uuid = test_discount_success(client) response = client.get(f'/contracts/{org_id}/modifiers/discount/{discount_uuid}') assert response.status_code == 200 assert response.json['id'] == discount_uuid, f'Received: {response.json}' assert response.json['percentage'] == 10.0, f'Received: {response.json}' assert response.json['threshold'] == 100.0, f'Received: {response.json}' assert response.json['display_name'] == 'Test Discount', f'Received: {response.json}' def test_discounts(client): discount_uuid = test_discount_success(client) response = client.get(f'/contracts/{org_id}/modifiers/discounts') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == discount_uuid, f'Received: {response.json}' #test cases for the /modifiers/minimums endpoint GET method def test_get_empty_minimums(client): response = client.get(f'/contracts/{org_id}/modifiers/minimums') assert response.status_code == 200 assert not response.json, f'Received: {response.json}' def test_get_minimum_success(client): minimum_uuid = test_minimum_success(client) response = client.get(f'/contracts/{org_id}/modifiers/minimum/{minimum_uuid}') assert response.status_code == 200 assert response.json['id'] == minimum_uuid, f'Received: {response.json}' assert response.json['amount'] == 100.0, f'Received: {response.json}' assert response.json['display_name'] == 'Test Minimum', f'Received: {response.json}' def test_get_billing_frequency_success(client): billing_frequency_uuid = test_billing_frequency_success(client) response = client.get(f'/contracts/{org_id}/modifiers/billing_frequency/{billing_frequency_uuid}') assert response.status_code == 200 assert response.json['id'] == billing_frequency_uuid, f'Received: {response.json}' assert response.json['display_name'] == 'Test Billing Frequency', f'Received: {response.json}' assert response.json['type'] == 1, f'Received: {response.json}' assert response.json['interval'] == 1, f'Received: {response.json}' assert response.json['frequency'] == 'D', f'Received: {response.json}' assert response.json['anchor'] == 'S', f'Received: {response.json}' assert response.json['eq'] == False, f'Received: {response.json}' def test_billing_frequencies(client): billing_frequency_uuid = test_billing_frequency_success(client) response = client.get(f'/contracts/{org_id}/modifiers/billing_frequencies') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == billing_frequency_uuid, f'Received: {response.json}' def test_get_contract_success(client): parent_contract_uuid = test_parent_contract_success(client) response = client.get(f'/contracts/{org_id}/contract/{parent_contract_uuid}') assert response.status_code == 200 assert response.json['id'] == parent_contract_uuid, f'Received: {response.json}' assert response.json['display_name'] == 'Test Parent Contract', f'Received: {response.json}' assert response.json['override_underlying'] == False, f'Received: {response.json}' assert all(k in response.json for k in ['organization_id' ,'customer_id', 'minimums', 'discounts', 'product_contracts', 'fixed_fees', 'sub_contracts']), f'Received: {response.json}' def test_get_contracts_by_customer_success(client): parent_contract_uuid = test_parent_contract_success(client) response = client.get(f'/contracts/{org_id}/contract/{parent_contract_uuid}') customer_id = (response.json)['customer_id'] response = client.get(f'/contracts/{org_id}/customer/{customer_id}') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == parent_contract_uuid, f'Received: {response.json}' def test_factory_run(client): response = client.post(f'/contracts/{org_id}/factory/run', json={}) assert response.status_code == 200, f'Received: {response.json}' def test_customer_create_success(client): response = client.post(f'/contracts/{org_id}/customers', json={'customer_name': 'Test Customer', 'customer_email': 'test@test.com'}) assert response.status_code == 201 assert 'customer_id' in response.json assert 'customer_name' in response.json assert response.json['customer_name'] == 'Test Customer' return response.json['customer_id'] def test_customer_get_success(client): customer_id = test_customer_create_success(client) response = client.get(f'/contracts/{org_id}/customers/{customer_id}') assert response.status_code == 200 assert response.json['customer_id'] == customer_id assert response.json['customer_name'] == 'Test Customer' assert response.json['customer_email'] == 'test@test.com' def test_customer_update_success(client): customer_id = test_customer_create_success(client) response = client.put(f'/contracts/{org_id}/customers/{customer_id}', json={'customer_name': 'Updated Customer', 'customer_email': 'test@test.com'}) assert response.status_code == 200 assert response.json['customer_id'] == customer_id def test_sim_factory_run(client): parent_contract_uuid = test_parent_contract_success(client, prefix='/sim') response = client.get(f'/sim/contracts/{org_id}/contract/{parent_contract_uuid}') product_id = response.json['product_contracts'][0]['product_id'] product_contract_id = response.json['product_contracts'][0]['id'] response = client.post(f'/sim/contracts/{org_id}/factory/run', json={'usage': [{'date': '2024-02-29', 'product_id': product_id, 'contract_id': product_contract_id, 'quantity': 100}] }) assert response.status_code == 200, f'Received: {response.json}' response = client.get(f'/sim/contracts/{org_id}/factory/charges') assert response.status_code == 200, f'Received: {response.json}' assert isinstance(response.json, list), f'Received: {response.json}'","title":"How-To & Sample Code"},{"location":"api-howto/#how-to-apis","text":"General Principles Recursive Contract Construction Setup Flow Operational Flow Modifications and Updates Sample Code","title":"How to - APIs"},{"location":"api-howto/#general-principles","text":"","title":"General Principles"},{"location":"api-howto/#recursive-contract-construction","text":"Constructing objects in streamOS is recursive, start with the lowest in the tree and continue building upwards through the hierarchy. Every reference to a UUID in a POST is an id of an object returned from another POST statement. streamOS maintains a factory that it references for all of these objects and links them together on run time. The Parent Contract is your ultimate tie in to the customer, so until the Parent Contract is created - contracts are orphans. Plans and Contracts can be reused - so once created you can use them over and over in other create objects for free, by just referencing the id.","title":"Recursive Contract Construction"},{"location":"api-howto/#overall-setup-flow","text":"The overall flow of creation follows this pattern: Create Customers: Create all the customers in streamOS appropriately and store the streamOS customer_ids Create Products: Create all the customers in streamOS appropriately and store the streamOS customer_ids Create Contracts: Create the appropriate contract structure that represent your contracts, verify using the UI if required","title":"Overall Setup Flow"},{"location":"api-howto/#operational-flow","text":"Structure Usage: Ensure your usage flow is of the format specified in the /contracts/org_id/usage endpoint Get Charges: Every update of usage or a contract upload / update triggers a run of the contracts - use the charges endpoint to get the results. Force a contract run: if you want to force a contract run trigger this","title":"Operational Flow"},{"location":"api-howto/#modifications-updates","text":"Modifying Contracts: Modifying contracts in streamOS is tantamount to creating a new contract. You would provide the same information as you did during contract creation to the same endpoint, except for the information that you are changing. Ensure you use the same id as the object you are replacing so that the system knows to replace existing references to it. Modifying Plans: Plans are modified in a similar fashion - post the modified information to the same endpoint with the same id to replace a plan definition. However, now that a plan has been changed - call the refresh endpoint to ensure that all contracts that reference this plan update their local copies of the plan.","title":"Modifications &amp; Updates"},{"location":"api-howto/#sample-code","text":"import pytest from flask import json from app import app from schema import input, output import uuid import os org_id = <YOUR_ORG_ID> auth_token = None @pytest.fixture def client(): global auth_token app.config['TESTING'] = True with app.test_client() as client: if auth_token is None: response = client.post('/login', json={'username':<USERNAME>, 'password': <PASSWORD>}) auth_token = response.json['access_token'] client.environ_base['HTTP_AUTHORIZATION'] = f'Bearer {auth_token}' yield client #test cases for the /plans/fixedfees endpoint def test_fixed_fee_no_input(client): response = client.post(f'/contracts/{org_id}/plans/fixedfee', json={}) assert response.status_code == 400 def test_fixed_fee_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/plans/fixedfee', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_fixed_fee_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Fixed Fee\", \"amount\": 100.0, \"period\": None # Add other required fields according to your FixedFeeSchema } response = client.post(f'{prefix}/contracts/{org_id}/plans/fixedfee', json=valid_input) assert response.status_code == 201 assert 'amount' in response.json assert 'id' in response.json assert 'display_name' in response.json assert response.json['amount'] == 100.0 assert response.json['display_name'] == 'Test Fixed Fee' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] # Test cases for the /plans/tier endpoint def test_tier_no_input(client): response = client.post(f'/contracts/{org_id}/plans/tier', json={}) assert response.status_code == 400 def test_tier_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/plans/tier', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_tier_invalid_start_value(client): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Tier\", \"tiers\": [[1, 100, 0.1], [101, None, 0.2]], \"pricing_type\": 1, \"period\": \"1D\" # Add other required fields according to your TierSchema } response = client.post(f'/contracts/{org_id}/plans/tier', json=valid_input) assert response.status_code == 400, f'Received: {response.json}' def test_tier_invalid_end_value(client): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Tier\", \"tiers\": [[0, 100, 0.1], [101, 201, 0.2]], \"pricing_type\": 1, \"period\": \"1D\" # Add other required fields according to your TierSchema } response = client.post(f'/contracts/{org_id}/plans/tier', json=valid_input) assert response.status_code == 400 def test_tier_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Tier\", \"tiers\": [[0, 100, 0.1], [101, None, 0.2]], \"pricing_type\": 1 # Add other required fields according to your TierSchema } response = client.post(f'{prefix}/contracts/{org_id}/plans/tier', json=valid_input) assert response.status_code == 201 # Assuming the response includes a UUID assert 'id' in response.json # Further assertions can be added to validate the UUID format or other response details return response.json['id'] # Test cases for the /modifiers/discounts endpoint def test_discount_no_input(client): response = client.post(f'/contracts/{org_id}/modifiers/discounts', json={}) assert response.status_code == 400 def test_discount_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/modifiers/discounts', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_discount_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Discount\", \"percentage\": 10.0, \"threshold\": 100.0 # Add other required fields according to your DiscountSchema } response = client.post(f'{prefix}/contracts/{org_id}/modifiers/discounts', json=valid_input) assert response.status_code == 201 # Assuming the response includes a UUID assert 'id' in response.json assert 'percentage' in response.json assert 'threshold' in response.json # Further assertions can be added to validate the UUID format or other return response.json['id'] def test_billing_frequency_no_input(client): response = client.post(f'/contracts/{org_id}/modifiers/billing_frequency', json={}) assert response.status_code == 400 def test_billing_frequency_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/modifiers/billing_frequency', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_billing_frequency_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Billing Frequency\", \"type\": 1, \"interval\": 1, \"frequency\": \"D\", \"anchor\": \"S\", \"eq\": False # Add other required fields according to your BillingFrequencySchema } response = client.post(f'{prefix}/contracts/{org_id}/modifiers/billing_frequency', json=valid_input) assert response.status_code == 201 # Assuming the response includes a UUID assert 'id' in response.json assert 'display_name' in response.json assert 'type' in response.json assert 'interval' in response.json assert 'frequency' in response.json assert 'anchor' in response.json assert 'eq' in response.json # Further assertions can be added to validate the UUID format or other response details return response.json['id'] def test_billing_frequency_sim_dates(client): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Billing Frequency\", \"type\": 1, \"interval\": 1, \"frequency\": \"M\", \"anchor\": \"S\", \"eq\": False, \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\" # Add other required fields according to your BillingFrequencySchema } response = client.post(f'/contracts/{org_id}/modifiers/billing_frequency/sim_dates', json=valid_input) assert response.status_code == 200, f'Received: {response.json}' # Assuming the response includes a UUID assert 'dates' in response.json, f'Received: {response.json}' def test_minimum_no_input(client): response = client.post(f'/contracts/{org_id}/modifiers/minimums', json={}) assert response.status_code == 400 def test_minimum_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/modifiers/minimums', json=invalid_input) assert response.status_code == 422 # Further assertions can be added based on specific validation error messages def test_minimum_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Minimum\", \"amount\": 100.0 # Add other required fields according to your MinimumSchema } response = client.post(f'{prefix}/contracts/{org_id}/modifiers/minimums', json=valid_input) assert response.status_code == 201 # Assuming the response includes a UUID assert 'id' in response.json # Further assertions can be added to validate the UUID format or other response details return response.json['id'] #test cases for the /contracts/productcontract endpoint def test_product_pricing_no_input(client): response = client.post(f'/contracts/{org_id}/productcontract', json={}) assert response.status_code == 400 assert response.json == {'message': 'No input data provided'} def test_product_pricing_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/productcontract', json=invalid_input) assert response.status_code == 422, f'Received: {response.json}' # Further assertions can be added based on specific validation error messages def test_product_pricing_success(client, prefix=''): # Assuming valid input structure for demonstration tier_uuid = test_tier_success(client, prefix) billing_uuid = test_billing_frequency_success(client, prefix) valid_input = { \"display_name\": \"Test Product Contract\", \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\", \"billing_frequency\": billing_uuid, \"tiers\": tier_uuid, \"product_id\": uuid.uuid4() # Add other required fields according to your ProductContractSchema } response = client.post(f'{prefix}/contracts/{org_id}/productcontract', json=valid_input) assert response.status_code == 201, f'Received: {response.json}' # Assuming the response includes a UUID assert 'id' in response.json, f'Received: {response.json}' assert 'billing_frequency' in response.json, f'Received: {response.json}' assert 'tiers' in response.json, f'Received: {response.json}' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] #testcases for the /contracts/subcontract endpoint def test_subcontract_no_input(client): response = client.post(f'/contracts/{org_id}/subcontract', json={}) assert response.status_code == 400 assert response.json == {'message': 'No input data provided'} def test_subcontract_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/subcontract', json=invalid_input) assert response.status_code == 422, f'Received: {response.json}' # Further assertions can be added based on specific validation error messages def test_subcontract_bad_objects(client): # Assuming valid input structure for demonstration billing_frequency_uuid = test_billing_frequency_success(client) valid_input = { \"display_name\": \"Test Subcontract\", \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\", \"billing_frequency\": billing_frequency_uuid, \"minimums\": uuid.uuid4(), \"discounts\": uuid.uuid4(), \"product_contracts\": [uuid.uuid4()], \"fixed_fees\": [uuid.uuid4()], \"sub_contracts\": [uuid.uuid4()], \"override_underlying\": False # Add other required fields according to your ContractSchema } response = client.post(f'/contracts/{org_id}/subcontract', json=valid_input) assert response.status_code == 422, f'Received: {response.json}' def test_subcontract_success(client, prefix=''): # Assuming valid input structure for demonstration minimum_uuid = test_minimum_success(client, prefix) discount_uuid = test_discount_success(client, prefix) product_contract_uuid = test_product_pricing_success(client, prefix) fixed_fee_uuid = test_fixed_fee_success(client, prefix) billing_frequency_uuid = test_billing_frequency_success(client, prefix) credit_uuid = test_credit_success(client, prefix) valid_input = { \"display_name\": \"Test Subcontract\", \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\", \"billing_frequency\": billing_frequency_uuid, \"minimums\": minimum_uuid, \"discounts\": discount_uuid, \"product_contracts\": [product_contract_uuid], \"fixed_fees\": [fixed_fee_uuid], \"credits\": credit_uuid, \"override_underlying\": False # Add other required fields according to your ContractSchema } response = client.post(f'{prefix}/contracts/{org_id}/subcontract', json=valid_input) assert response.status_code == 201, f'Received: {response.json}' # Assuming the response includes a UUID assert 'id' in response.json, f'Received: {response.json}' assert 'billing_frequency' in response.json, f'Received: {response.json}' assert 'minimums' in response.json, f'Received: {response.json}' assert 'discounts' in response.json, f'Received: {response.json}' assert 'product_contracts' in response.json, f'Received: {response.json}' assert 'fixed_fees' in response.json, f'Received: {response.json}' assert 'credits' in response.json, f'Received: {response.json}' assert response.json['display_name'] == 'Test Subcontract', f'Received: {response.json}' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] #testcases for the /contracts/parentcontract endpoint def test_parent_contract_no_input(client): response = client.post(f'/contracts/{org_id}/parentcontract', json={}) assert response.status_code == 400 assert response.json == {'message': 'No input data provided'} def test_parent_contract_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/parentcontract', json=invalid_input) assert response.status_code == 422, f'Received: {response.json}' # Further assertions can be added based on specific validation error messages def test_parent_contract_success(client, prefix=''): # Assuming valid input structure for demonstration product_contract_uuid = test_product_pricing_success(client, prefix) fixed_fee_uuid = test_fixed_fee_success(client, prefix) sub_contract_uuid = test_subcontract_success(client, prefix) billing_frequency_uuid = test_billing_frequency_success(client, prefix) credit_uuid = test_credit_success(client, prefix) valid_input = { \"organization_id\": org_id, \"customer_id\": uuid.uuid4(), \"display_name\": \"Test Parent Contract\", \"start_date\": \"2023-01-01T00:00:00\", \"end_date\": \"2023-12-31T23:59:59\", \"billing_frequency\": billing_frequency_uuid, \"product_contracts\": [product_contract_uuid], \"credits\": credit_uuid, \"fixed_fees\": [fixed_fee_uuid], \"sub_contracts\": [sub_contract_uuid], \"override_underlying\": False # Add other required fields according to your ParentContractSchema } response = client.post(f'{prefix}/contracts/{org_id}/parentcontract', json=valid_input) assert response.status_code == 201, f'Received: {response.json}' # Assuming the response includes a UUID assert 'id' in response.json, f'Received: {response.json}' assert 'billing_frequency' in response.json, f'Received: {response.json}' assert 'product_contracts' in response.json, f'Received: {response.json}' assert 'fixed_fees' in response.json, f'Received: {response.json}' assert 'sub_contracts' in response.json, f'Received: {response.json}' assert 'credits' in response.json, f'Received: {response.json}' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] def test_credit_no_input(client): response = client.post(f'/contracts/{org_id}/modifiers/credits', json={}) assert response.status_code == 400 assert response.json == {'message': 'No input data provided'} def test_credit_invalid_input(client): # Assuming invalid input structure for demonstration invalid_input = {\"invalidField\": \"invalidValue\"} response = client.post(f'/contracts/{org_id}/modifiers/credits', json=invalid_input) assert response.status_code == 422, f'Received: {response.json}' # Further assertions can be added based on specific validation error messages def test_credit_success(client, prefix=''): # Assuming valid input structure for demonstration valid_input = { \"display_name\": \"Test Credit\", \"amount\": 100.0, \"expiry\": \"1Y\" # Add other required fields according to your CreditSchema } response = client.post(f'{prefix}/contracts/{org_id}/modifiers/credits', json=valid_input) assert response.status_code == 201, f'Received: {response.json}' # Assuming the response includes a UUID assert 'id' in response.json, f'Received: {response.json}' assert 'expiry' in response.json, f'Received: {response.json}' assert 'display_name' in response.json, f'Received: {response.json}' assert 'amount' in response.json, f'Received: {response.json}' # Further assertions can be added to validate the UUID format or other response details return response.json['id'] def test_get_credits(client): credit_uuid = test_credit_success(client) response = client.get(f'/contracts/{org_id}/modifiers/credits') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == credit_uuid, f'Received: {response.json}' def test_get_credit_success(client): credit_uuid = test_credit_success(client) response = client.get(f'/contracts/{org_id}/modifiers/credit/{credit_uuid}') assert response.status_code == 200 assert response.json['id'] == credit_uuid, f'Received: {response.json}' assert response.json['display_name'] == 'Test Credit', f'Received: {response.json}' assert response.json['amount'] == 100.0, f'Received: {response.json}' assert response.json['expiry'] == '1Y', f'Received: {response.json}' def test_tiers(client): tier_uuid = test_tier_success(client) response = client.get(f'/contracts/{org_id}/plans/tiers') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == tier_uuid, f'Received: {response.json}' def test_nonexistent_tier(client): uuid = '00000000-0000-0000-0000-000000000000' response = client.get(f'/contracts/{org_id}/plans/tier/{uuid}') assert response.status_code == 404 def test_get_tier_success(client): tier_ = test_tier_success(client) response = client.get(f'/contracts/{org_id}/plans/tier/{tier_}') assert response.status_code == 200 assert response.json['id'] == tier_, f'Received: {response.json}' assert response.json['display_name'] == 'Test Tier', f'Received: {response.json}' assert response.json['tier'] == [[0, 100, 0.1], [101, None, 0.2]], f'Received: {response.json}' assert response.json['pricing_type'] == 1, f'Received: {response.json}' #test cases for the /plans/fixedfees endpoint GET method def test_get_empty_fixed_fees(client): response = client.get(f'/contracts/{org_id}/plans/fixedfees') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 0, f'Received: {response.json}' def test_nonexistent_fixed_fee(client): uuid = '00000000-0000-0000-0000-000000000000' response = client.get(f'/contracts/{org_id}/plans/fixedfee/{uuid}') assert response.status_code == 404 def test_get_fixed_fee_success(client): fixed_fee_uuid = test_fixed_fee_success(client) response = client.get(f'/contracts/{org_id}/plans/fixedfee/{fixed_fee_uuid}') assert response.status_code == 200 assert response.json['id'] == fixed_fee_uuid, f'Received: {response.json}' assert response.json['amount'] == 100.0, f'Received: {response.json}' assert response.json['period'] == None, f'Received: {response.json}' assert response.json['display_name'] == 'Test Fixed Fee', f'Received: {response.json}' def test_fixed_fees(client): fixed_fee_uuid = test_fixed_fee_success(client) response = client.get(f'/contracts/{org_id}/plans/fixedfees') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == fixed_fee_uuid, f'Received: {response.json}' def test_get_discount_success(client): discount_uuid = test_discount_success(client) response = client.get(f'/contracts/{org_id}/modifiers/discount/{discount_uuid}') assert response.status_code == 200 assert response.json['id'] == discount_uuid, f'Received: {response.json}' assert response.json['percentage'] == 10.0, f'Received: {response.json}' assert response.json['threshold'] == 100.0, f'Received: {response.json}' assert response.json['display_name'] == 'Test Discount', f'Received: {response.json}' def test_discounts(client): discount_uuid = test_discount_success(client) response = client.get(f'/contracts/{org_id}/modifiers/discounts') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == discount_uuid, f'Received: {response.json}' #test cases for the /modifiers/minimums endpoint GET method def test_get_empty_minimums(client): response = client.get(f'/contracts/{org_id}/modifiers/minimums') assert response.status_code == 200 assert not response.json, f'Received: {response.json}' def test_get_minimum_success(client): minimum_uuid = test_minimum_success(client) response = client.get(f'/contracts/{org_id}/modifiers/minimum/{minimum_uuid}') assert response.status_code == 200 assert response.json['id'] == minimum_uuid, f'Received: {response.json}' assert response.json['amount'] == 100.0, f'Received: {response.json}' assert response.json['display_name'] == 'Test Minimum', f'Received: {response.json}' def test_get_billing_frequency_success(client): billing_frequency_uuid = test_billing_frequency_success(client) response = client.get(f'/contracts/{org_id}/modifiers/billing_frequency/{billing_frequency_uuid}') assert response.status_code == 200 assert response.json['id'] == billing_frequency_uuid, f'Received: {response.json}' assert response.json['display_name'] == 'Test Billing Frequency', f'Received: {response.json}' assert response.json['type'] == 1, f'Received: {response.json}' assert response.json['interval'] == 1, f'Received: {response.json}' assert response.json['frequency'] == 'D', f'Received: {response.json}' assert response.json['anchor'] == 'S', f'Received: {response.json}' assert response.json['eq'] == False, f'Received: {response.json}' def test_billing_frequencies(client): billing_frequency_uuid = test_billing_frequency_success(client) response = client.get(f'/contracts/{org_id}/modifiers/billing_frequencies') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == billing_frequency_uuid, f'Received: {response.json}' def test_get_contract_success(client): parent_contract_uuid = test_parent_contract_success(client) response = client.get(f'/contracts/{org_id}/contract/{parent_contract_uuid}') assert response.status_code == 200 assert response.json['id'] == parent_contract_uuid, f'Received: {response.json}' assert response.json['display_name'] == 'Test Parent Contract', f'Received: {response.json}' assert response.json['override_underlying'] == False, f'Received: {response.json}' assert all(k in response.json for k in ['organization_id' ,'customer_id', 'minimums', 'discounts', 'product_contracts', 'fixed_fees', 'sub_contracts']), f'Received: {response.json}' def test_get_contracts_by_customer_success(client): parent_contract_uuid = test_parent_contract_success(client) response = client.get(f'/contracts/{org_id}/contract/{parent_contract_uuid}') customer_id = (response.json)['customer_id'] response = client.get(f'/contracts/{org_id}/customer/{customer_id}') assert response.status_code == 200 assert isinstance(response.json, list) and len(response.json) == 1, f'Received: {response.json}' assert (response.json[0])['id'] == parent_contract_uuid, f'Received: {response.json}' def test_factory_run(client): response = client.post(f'/contracts/{org_id}/factory/run', json={}) assert response.status_code == 200, f'Received: {response.json}' def test_customer_create_success(client): response = client.post(f'/contracts/{org_id}/customers', json={'customer_name': 'Test Customer', 'customer_email': 'test@test.com'}) assert response.status_code == 201 assert 'customer_id' in response.json assert 'customer_name' in response.json assert response.json['customer_name'] == 'Test Customer' return response.json['customer_id'] def test_customer_get_success(client): customer_id = test_customer_create_success(client) response = client.get(f'/contracts/{org_id}/customers/{customer_id}') assert response.status_code == 200 assert response.json['customer_id'] == customer_id assert response.json['customer_name'] == 'Test Customer' assert response.json['customer_email'] == 'test@test.com' def test_customer_update_success(client): customer_id = test_customer_create_success(client) response = client.put(f'/contracts/{org_id}/customers/{customer_id}', json={'customer_name': 'Updated Customer', 'customer_email': 'test@test.com'}) assert response.status_code == 200 assert response.json['customer_id'] == customer_id def test_sim_factory_run(client): parent_contract_uuid = test_parent_contract_success(client, prefix='/sim') response = client.get(f'/sim/contracts/{org_id}/contract/{parent_contract_uuid}') product_id = response.json['product_contracts'][0]['product_id'] product_contract_id = response.json['product_contracts'][0]['id'] response = client.post(f'/sim/contracts/{org_id}/factory/run', json={'usage': [{'date': '2024-02-29', 'product_id': product_id, 'contract_id': product_contract_id, 'quantity': 100}] }) assert response.status_code == 200, f'Received: {response.json}' response = client.get(f'/sim/contracts/{org_id}/factory/charges') assert response.status_code == 200, f'Received: {response.json}' assert isinstance(response.json, list), f'Received: {response.json}'","title":"Sample Code"},{"location":"billing/","text":"Billing Frequency Billing Frequency defines how charges generated in a contract are billed out. All charges within streamOS are pro-rated on a per day basis in the system - they are then grouped and added based on the billing frequency to generate and total to be charged. streamOS supports generating billing on a per day, per week, per month or per year basis. With an appropriate use of contracts and billing frequencies contracts can be billed at any day and frequency. Type : the offset to use to calculate the frequency : CALENDAR: all offsets are based of a calendar start date : CONTRACT: all offsets are based of a contract start date - of the associated contract Interval : The number of periods Frequency : 'D' for days, 'W' for weeks, 'M' for months, 'Y' for years (Interval:2 and Frequency: 'Y' = once every 2 years) anchor : Use the beginning or the end if each generated period eq : for periods with unequal days - equalize the amounts generated by them Example(s): Contract : ``` Start Date: 2024-11-26 End Date: 2025-11-26 Scenario 1: Type: CONTRACT Interval: 2 Frequency: 'M' anchor = 'S' Interpretation: Bill all charges generated by this contract every 2 months from the contract start at the beginning of each period Dates Generated: ['2024-11-26', '2025-01-26', '2025-03-26', '2025-05-26', '2025-07-26', '2025-09-26', '2025-11-26'] Scenario 2 Type: CALENDAR Interval: 2 Frequency: 'M' anchor = 'S' Interpretation: Bill all charges generated by this contract every 2 months from the calendar start at the beginning of each period Dates Generated: ['2024-11-01', '2025-01-01', '2025-03-01', '2025-05-01', '2025-07-01', '2025-09-01', '2025-11-01'] Notice the difference between the anchor dates - one anchors off the contract start and the other uses the closes calendar month of the contract. Please note that billing frequencies of contracts influence those of the contracts below them","title":"Billing Frequency"},{"location":"billing/#billing-frequency","text":"Billing Frequency defines how charges generated in a contract are billed out. All charges within streamOS are pro-rated on a per day basis in the system - they are then grouped and added based on the billing frequency to generate and total to be charged. streamOS supports generating billing on a per day, per week, per month or per year basis. With an appropriate use of contracts and billing frequencies contracts can be billed at any day and frequency. Type : the offset to use to calculate the frequency : CALENDAR: all offsets are based of a calendar start date : CONTRACT: all offsets are based of a contract start date - of the associated contract Interval : The number of periods Frequency : 'D' for days, 'W' for weeks, 'M' for months, 'Y' for years (Interval:2 and Frequency: 'Y' = once every 2 years) anchor : Use the beginning or the end if each generated period eq : for periods with unequal days - equalize the amounts generated by them Example(s): Contract : ``` Start Date: 2024-11-26 End Date: 2025-11-26 Scenario 1: Type: CONTRACT Interval: 2 Frequency: 'M' anchor = 'S' Interpretation: Bill all charges generated by this contract every 2 months from the contract start at the beginning of each period Dates Generated: ['2024-11-26', '2025-01-26', '2025-03-26', '2025-05-26', '2025-07-26', '2025-09-26', '2025-11-26'] Scenario 2 Type: CALENDAR Interval: 2 Frequency: 'M' anchor = 'S' Interpretation: Bill all charges generated by this contract every 2 months from the calendar start at the beginning of each period Dates Generated: ['2024-11-01', '2025-01-01', '2025-03-01', '2025-05-01', '2025-07-01', '2025-09-01', '2025-11-01'] Notice the difference between the anchor dates - one anchors off the contract start and the other uses the closes calendar month of the contract. Please note that billing frequencies of contracts influence those of the contracts below them","title":"Billing Frequency"},{"location":"bot/","text":"The streamOS Bot Install our slack app to get started The streamOS Bot is the primary mode of communication between our platform and its users. You can find it in the App's section of your slack installation. Once you get there it is self explanatory There are 3 sections on the top of the page : Home:: This is your home base for streamOS where you receive summary of important information about our platform. Go to Explorer: Click this to navigate to our web home Messages:: This is your direct message channel between you and the platform. The bot will send you notifications and requests on this channel. Type /streamos help to start interacting with the platform.","title":"The streamOS Bot"},{"location":"bot/#the-streamos-bot","text":"Install our slack app to get started The streamOS Bot is the primary mode of communication between our platform and its users. You can find it in the App's section of your slack installation. Once you get there it is self explanatory There are 3 sections on the top of the page : Home:: This is your home base for streamOS where you receive summary of important information about our platform. Go to Explorer: Click this to navigate to our web home Messages:: This is your direct message channel between you and the platform. The bot will send you notifications and requests on this channel. Type /streamos help to start interacting with the platform.","title":"The streamOS Bot"},{"location":"c2c/","text":"Contract2Cash streamOS:Contract2Cash \u2013 Module enables companies to create, measure, bill and reconcile the entire contract 2 cash process for complex, small and large scale billing processes. From setting up complex contract structures, viewing usage and real-time charges \u2013 this document will walk you through our primary modules, interaction structures and how best to utilize the power of the financial operating system to best suit your needs. As always contact your streamOS sales representative or email us for any further question you may have.","title":"Use Case - Contract2Cash"},{"location":"c2c/#contract2cash","text":"streamOS:Contract2Cash \u2013 Module enables companies to create, measure, bill and reconcile the entire contract 2 cash process for complex, small and large scale billing processes. From setting up complex contract structures, viewing usage and real-time charges \u2013 this document will walk you through our primary modules, interaction structures and how best to utilize the power of the financial operating system to best suit your needs. As always contact your streamOS sales representative or email us for any further question you may have.","title":"Contract2Cash"},{"location":"contract_examples/","text":"Contract Examples COMING SOON","title":"Examples"},{"location":"contract_examples/#contract-examples","text":"COMING SOON","title":"Contract Examples"},{"location":"contracts/","text":"Contracts Contracts in streamOS are business logic elements that store financial logic of how to charge a customer. Parent Contract Sub-Contract Product Contract Contract Types Contracts in streamOS are containers that decide how billing elements (plans / modifiers) are charged (frequency) and how they interact with each other. They define dates (start, end, how often) and sequence, they do not define how much (these are handled by plans and modifiers) Parent Contract Parent Contracts are top level contracts that are directly linked with a customer. These are overarching concepts that are containers for all related elements and can action on all items below them. Any direct items associated with them are indicative of the fact that they will be charged just because the contract exists and for no other reason. A Parent Contract contains the following elements: Display Name : The Name of the Parent Contract - usually named something simple - 'Company A Master Agreement' Customer ID : The id of the customer associated with this contract Payment Terms : in days - translated directly to the accounting platform as issue_date + days Start Date : The Start Date of the contract End Date : The End Date of the contract Fixed Fees : [List of FixedFee] : Any fixed fees associated with this contract Minimums : Minimum Any minimums associated with this contract - (this will be applied after all charges are totaled) Discounts : Discount Any discounts that need to be applied after all the charges are totaled Auto-Renewals : [Auto-Renewal] Logic about renewal of the contract Sub-Contracts : [List of SubContract ] Sub-Contracts associated with this parent Billing Frequency : Billing-Frequency Specifies how all aspects of charges in this contract should be billed Sub-Contract Sub-Contracts are exactly like Parent Contracts except that they do not link to customer's and hence cannot live without a Parent Contract. They are useful concepts to separate units of billables by dates, billing frequencies or other behaviors. Sub-Contracts are infinitely nestable - meaning that a sub-contract can have infinite children, where each child is subject to the parent. Example Company A has 2 kinds of fees it charges it customer's: a platform fee that is billed one year in advance for $10,000 & a support fee that is billed every month for $500. Parent Contract: Sub-Contract: Platform Fee Contract Fixed Fee Plan : Platform Amount: $10,000 / year Billing Frequency: 1Y advance Sub-Contract: Support Fee Contract Fixed Fee Plan : Support Amount: $500 / month Billing Frequency: 1M arrears Product Contract Product Contracts exist to create contract structures around products - they tie a product with its price and its usage. Display Name : The name of the Contract Product ID : The streamOS ID of the product that this contract is representing Tiers : Tiers the effective pricing schematic of the product Billing Frequency : Billing Frequency how the charges from this contract need to be billed","title":"Contract Types"},{"location":"contracts/#contracts","text":"Contracts in streamOS are business logic elements that store financial logic of how to charge a customer. Parent Contract Sub-Contract Product Contract","title":"Contracts"},{"location":"contracts/#contract-types","text":"Contracts in streamOS are containers that decide how billing elements (plans / modifiers) are charged (frequency) and how they interact with each other. They define dates (start, end, how often) and sequence, they do not define how much (these are handled by plans and modifiers)","title":"Contract Types"},{"location":"contracts/#parent-contract","text":"Parent Contracts are top level contracts that are directly linked with a customer. These are overarching concepts that are containers for all related elements and can action on all items below them. Any direct items associated with them are indicative of the fact that they will be charged just because the contract exists and for no other reason. A Parent Contract contains the following elements: Display Name : The Name of the Parent Contract - usually named something simple - 'Company A Master Agreement' Customer ID : The id of the customer associated with this contract Payment Terms : in days - translated directly to the accounting platform as issue_date + days Start Date : The Start Date of the contract End Date : The End Date of the contract Fixed Fees : [List of FixedFee] : Any fixed fees associated with this contract Minimums : Minimum Any minimums associated with this contract - (this will be applied after all charges are totaled) Discounts : Discount Any discounts that need to be applied after all the charges are totaled Auto-Renewals : [Auto-Renewal] Logic about renewal of the contract Sub-Contracts : [List of SubContract ] Sub-Contracts associated with this parent Billing Frequency : Billing-Frequency Specifies how all aspects of charges in this contract should be billed","title":"Parent Contract"},{"location":"contracts/#sub-contract","text":"Sub-Contracts are exactly like Parent Contracts except that they do not link to customer's and hence cannot live without a Parent Contract. They are useful concepts to separate units of billables by dates, billing frequencies or other behaviors. Sub-Contracts are infinitely nestable - meaning that a sub-contract can have infinite children, where each child is subject to the parent. Example Company A has 2 kinds of fees it charges it customer's: a platform fee that is billed one year in advance for $10,000 & a support fee that is billed every month for $500. Parent Contract: Sub-Contract: Platform Fee Contract Fixed Fee Plan : Platform Amount: $10,000 / year Billing Frequency: 1Y advance Sub-Contract: Support Fee Contract Fixed Fee Plan : Support Amount: $500 / month Billing Frequency: 1M arrears","title":"Sub-Contract"},{"location":"contracts/#product-contract","text":"Product Contracts exist to create contract structures around products - they tie a product with its price and its usage. Display Name : The name of the Contract Product ID : The streamOS ID of the product that this contract is representing Tiers : Tiers the effective pricing schematic of the product Billing Frequency : Billing Frequency how the charges from this contract need to be billed","title":"Product Contract"},{"location":"customer/","text":"Customer Information about your customer - existing or new. streamOS takes care of creating/reconciling this customer with existing customers on your accounting platform, ensuring alignment with your accounting practices and approval workflows. The Customer Object: Essential Information Customer Id : The streamOS Id associated with the customer Customer Name : The name of the customer (Required) Customer Email : The email of the customer (Required) Accounting Specific Information (Optional - depending on your accounting practices) Contact Name : Name of the contact person at the customer Phone Number : Phone number of the contact person Currency Code : Currency Code associated with the customer Notes : Additional notes that you would like to register Address : Type : billing / shipping / po_bo /unknown Address1 : First line of the address Address2 : Second line of the address City : City Region : State Postal Code","title":"Customer Object"},{"location":"customer/#customer","text":"Information about your customer - existing or new. streamOS takes care of creating/reconciling this customer with existing customers on your accounting platform, ensuring alignment with your accounting practices and approval workflows.","title":"Customer"},{"location":"customer/#the-customer-object","text":"","title":"The Customer Object:"},{"location":"customer/#essential-information","text":"Customer Id : The streamOS Id associated with the customer Customer Name : The name of the customer (Required) Customer Email : The email of the customer (Required)","title":"Essential Information"},{"location":"customer/#accounting-specific-information-optional-depending-on-your-accounting-practices","text":"Contact Name : Name of the contact person at the customer Phone Number : Phone number of the contact person Currency Code : Currency Code associated with the customer Notes : Additional notes that you would like to register Address : Type : billing / shipping / po_bo /unknown Address1 : First line of the address Address2 : Second line of the address City : City Region : State Postal Code","title":"Accounting Specific Information (Optional - depending on your accounting practices)"},{"location":"faq/","text":"","title":"FAQ & How-To"},{"location":"integrations/","text":"","title":"Integrations"},{"location":"invoice/","text":"Invoice The invoice object is streamOS representation of an invoice, it represents all aspects of what will actually get translated into your accounting platform and seen by your customers. Many of the elements here are controlled by contract structures and definitions mentioned earlier in the document. Invoice Date: Generated by the system when the invoice is generated approved and sent to the accounting platform Due Date: Calculated based on the defined payment term in the contract streamOS Customer ID: The streamOS reference of the customer id Accounting Customer ID: The customer id from your accounting platform that references the same customer Line Item Description: The description that will reflect on your invoice Unit Amount: The unit amount of the charge that will reflect on your invoice Quantity: The quantity Total Amount: Unit Amount * Quantity streamOS Product Id: The reference to the item being charged (this could be an actual product or a plan like Fixed Fee) Accounting Product Id: The accounting reference to the same item - so the line item can be mapped to the appropriate account The linkage between the streamOS and Accounting ID's are done through reconciliation .","title":"Invoice Object"},{"location":"invoice/#invoice","text":"The invoice object is streamOS representation of an invoice, it represents all aspects of what will actually get translated into your accounting platform and seen by your customers. Many of the elements here are controlled by contract structures and definitions mentioned earlier in the document. Invoice Date: Generated by the system when the invoice is generated approved and sent to the accounting platform Due Date: Calculated based on the defined payment term in the contract streamOS Customer ID: The streamOS reference of the customer id Accounting Customer ID: The customer id from your accounting platform that references the same customer Line Item Description: The description that will reflect on your invoice Unit Amount: The unit amount of the charge that will reflect on your invoice Quantity: The quantity Total Amount: Unit Amount * Quantity streamOS Product Id: The reference to the item being charged (this could be an actual product or a plan like Fixed Fee) Accounting Product Id: The accounting reference to the same item - so the line item can be mapped to the appropriate account The linkage between the streamOS and Accounting ID's are done through reconciliation .","title":"Invoice"},{"location":"marketplace/","text":"Marketplace Solutions","title":"Use Case - Marketplace"},{"location":"marketplace/#marketplace-solutions","text":"","title":"Marketplace Solutions"},{"location":"modifiers/","text":"Modifiers Modifiers are called as such because they are called at the end of every contract run stage and affect the final output of a contract.Every modifier of a contract applies on the result of itself + all its sub-contracts and product contracts. Minimums Discounts Credits Minimums This ensures that a minimum charge is billed to the customer irrespective of the amount billed by actual elements within the contract. Use minimums with contracts to specify period - per month / quarter / year / contract period. Look at Contract Examples for some creative ways. Display Name : Name the minimum Amount : The amount of the minimum Discounts Discount the total billed to the customer. Look at Contract Examples for some creative ways. Display Name : Name the minimum Percentage : The percentage to be discounted Threshold : The number above which to apply the discount Credits Credits to be provided to the customer per contract. Display Name : Name Amount : The amount credit to be applied Expiry : When the credit expires in days from creation","title":"Modifiers"},{"location":"modifiers/#modifiers","text":"Modifiers are called as such because they are called at the end of every contract run stage and affect the final output of a contract.Every modifier of a contract applies on the result of itself + all its sub-contracts and product contracts. Minimums Discounts Credits","title":"Modifiers"},{"location":"modifiers/#minimums","text":"This ensures that a minimum charge is billed to the customer irrespective of the amount billed by actual elements within the contract. Use minimums with contracts to specify period - per month / quarter / year / contract period. Look at Contract Examples for some creative ways. Display Name : Name the minimum Amount : The amount of the minimum","title":"Minimums"},{"location":"modifiers/#discounts","text":"Discount the total billed to the customer. Look at Contract Examples for some creative ways. Display Name : Name the minimum Percentage : The percentage to be discounted Threshold : The number above which to apply the discount","title":"Discounts"},{"location":"modifiers/#credits","text":"Credits to be provided to the customer per contract. Display Name : Name Amount : The amount credit to be applied Expiry : When the credit expires in days from creation","title":"Credits"},{"location":"overview/","text":"Overview The system consists of the following: Customers : Contains everything related to your customers that streamOS requires + some that your accounting platform requires. Products : Deals with products / services that you provide + some information to manage for your accounting system. Contracts : Is the brain of the module, stores key contract logic and the magic that makes them work. Usage : Deals with quantities of products or services that are sold over time Invoice : streamOS' representation of an actual invoice, this is as close an approximation of what will be translated to your accounting platform and to your customers. Read through the rest of this guide or jump around as you see fit.","title":"Object Overview"},{"location":"overview/#overview","text":"The system consists of the following: Customers : Contains everything related to your customers that streamOS requires + some that your accounting platform requires. Products : Deals with products / services that you provide + some information to manage for your accounting system. Contracts : Is the brain of the module, stores key contract logic and the magic that makes them work. Usage : Deals with quantities of products or services that are sold over time Invoice : streamOS' representation of an actual invoice, this is as close an approximation of what will be translated to your accounting platform and to your customers. Read through the rest of this guide or jump around as you see fit.","title":"Overview"},{"location":"plans/","text":"Plans Plans are billable events in streamOS. They define amounts that need to be charged to the customer. They are operated upon by contracts to enforce how long and when. Plans are meant to be flexible, they can be created specific to each contract and applied or created as generic plans to be applied across your customer base. Fixed Fee Plans Rev Share Plans Usage Based Plans Fixed Fee Plans These are plans that have no variable component to them. Hence can be anything from a License Fee, Support Plan to a One Time Payment. Combined with contracts, they can be charged to the customer at different frequencies. Display Name : The name of the plan (this can be customer specific such as - Customer XX One Time Payment or generic - Enterprise Customer Platform Fee) Amount / period : The amount of the fee per period (Ex. $100 / month) Usage Based Plans These are plans that are tied with usage of a product. Usage Based Plans are linked to products via Product Contracts. PricingType : FLAT : The single price irrespective of usage STEPPED: Charged the price at the target volume RAMPED: Charged the price through tiers for qualifying tiers Tiers : | Min. Quantity | Max. Quantity | Rate | Accumulation Period : The duration of time over which usage needs to be totaled before the rate is calculated. Example: Min. Quantity Max. Quantity Rate 0 100 100 101 200 90 201 300 80 301 inf. 70 Scenario 1: Quantity 500, STEPPED = 500 * 70 = $35000 Scenario 2: Quantity 500, RAMPED = 100 * 100 + 100 * 90 + 100 * 80 + 200 * 70 = $41000","title":"Plans"},{"location":"plans/#plans","text":"Plans are billable events in streamOS. They define amounts that need to be charged to the customer. They are operated upon by contracts to enforce how long and when. Plans are meant to be flexible, they can be created specific to each contract and applied or created as generic plans to be applied across your customer base. Fixed Fee Plans Rev Share Plans Usage Based Plans","title":"Plans"},{"location":"plans/#fixed-fee-plans","text":"These are plans that have no variable component to them. Hence can be anything from a License Fee, Support Plan to a One Time Payment. Combined with contracts, they can be charged to the customer at different frequencies. Display Name : The name of the plan (this can be customer specific such as - Customer XX One Time Payment or generic - Enterprise Customer Platform Fee) Amount / period : The amount of the fee per period (Ex. $100 / month)","title":"Fixed Fee Plans"},{"location":"plans/#usage-based-plans","text":"These are plans that are tied with usage of a product. Usage Based Plans are linked to products via Product Contracts. PricingType : FLAT : The single price irrespective of usage STEPPED: Charged the price at the target volume RAMPED: Charged the price through tiers for qualifying tiers Tiers : | Min. Quantity | Max. Quantity | Rate | Accumulation Period : The duration of time over which usage needs to be totaled before the rate is calculated. Example: Min. Quantity Max. Quantity Rate 0 100 100 101 200 90 201 300 80 301 inf. 70 Scenario 1: Quantity 500, STEPPED = 500 * 70 = $35000 Scenario 2: Quantity 500, RAMPED = 100 * 100 + 100 * 90 + 100 * 80 + 200 * 70 = $41000","title":"Usage Based Plans"},{"location":"privacy/","text":"Stream Financial Technology Corporation Effective Date: August 16 th , 2024 Stream Financial Technology Corporation (\"we,\" \"our,\" \"us\") values and respects the privacy of our customers, partners, and users. This Privacy Policy is designed to inform you, as a user of our services, about the collection, use, disclosure, and protection of your personal data. By accessing or using any services provided by Stream Financial Technology Corporation, including but not limited to the streamOS Contract2Cash platform and the B2B Marketplace (collectively, the \u201cServices\u201d), you consent to the data practices described in this Privacy Policy. This Privacy Policy is intended to comply with applicable data protection laws, including, where applicable, the General Data Protection Regulation (GDPR) and the California Consumer Privacy Act (CCPA). 1. Definitions For the purposes of this Privacy Policy: \"Personal Data\" refers to any information that relates to an identified or identifiable individual, including but not limited to names, contact information, billing details, and other information as defined by applicable data protection laws. \"Processing\" refers to any operation performed on personal data, including collection, storage, use, disclosure, and deletion. \"Data Controller\" refers to the entity that determines the purposes and means of processing personal data. 2. Information We Collect We may collect and process the following categories of data in connection with your use of our Services: Customer and Contract Data: Information about your customers, including but not limited to names, credit information, invoices, contractual terms, account details, and product data that you provide or that is automatically synced through integrations with third-party systems (such as accounting and CRM platforms). Business and Financial Information: This includes data related to contractual terms, revenue metrics, payment information, reconciliation data, and other financial metrics stored or computed in real-time through the Services. Personal Data of Individuals: When you engage with our Services, we may collect personally identifiable information about you or your employees, such as your name, business contact information (including email address, phone number), job title, and professional credentials. Usage Data: We collect data related to your interactions with our Services, such as IP addresses, browser types, device information, referring URLs, access logs, and other usage statistics that may help us improve the functionality of our Services. 3. Methods of Data Collection We collect data in several ways, including but not limited to the following: Direct Collection: Personal Data may be collected directly from you when you voluntarily provide it, such as when you register for an account, submit inquiries, interact with customer service, or otherwise communicate with us. Automated Technologies: We use cookies, web beacons, and other similar tracking technologies to collect information about how you interact with our Services. Third-Party Integrations: We collect data from integrated systems such as accounting platforms and Customer Relationship Management (CRM) systems to facilitate data connectivity, financial workflows, and reconciliation. The nature of the data collected through these integrations is dictated by your configurations and the permissions granted to us. 4. Purposes for Processing Personal Data We may process your Personal Data for the following legitimate business purposes: To Provide the Services: To deliver, operate, maintain, and support our platform and its functionality, including real-time processing of revenue metrics, contractual terms, reconciliation of financial data, and related workflows. To Improve the Services: To understand how users interact with our Services, to analyze usage patterns, and to improve the features, user experience, and functionality of our platform. To Communicate with You: To respond to inquiries, provide support, send administrative updates, and communicate with you regarding product developments, service updates, and other information. To Enforce Legal and Contractual Obligations: To comply with applicable legal obligations, contractual terms, and dispute resolution mechanisms, and to enforce our Terms of Service. For Security Purposes: To protect the integrity of our systems and data, prevent fraud, unauthorized access, and security breaches, and ensure the safety of our customers' information. 5. Legal Basis for Processing (For GDPR-Compliant Regions) Where the GDPR applies, we rely on the following legal grounds for processing your Personal Data: Performance of a Contract: Processing is necessary to perform our contractual obligations, such as providing you with access to the Services. Legitimate Interests: We may process your data based on our legitimate interests, provided that those interests are not overridden by your fundamental rights and freedoms. This includes improving the Services and ensuring their security. Consent: Where applicable, we will rely on your consent to process your data, such as for certain types of marketing or data-sharing activities. 6. Disclosure of Data to Third Parties We do not sell or rent Personal Data. However, we may disclose Personal Data to third parties under the following circumstances: Service Providers: We may share Personal Data with third-party service providers that perform services on our behalf, including but not limited to cloud hosting providers, analytics services, and payment processors. These service providers are bound by contractual obligations to protect your data. Legal and Regulatory Requirements: We may disclose Personal Data if required to comply with applicable laws, regulations, legal proceedings, or governmental requests, or to protect our rights, property, and safety. Business Transactions: In the event of a merger, acquisition, reorganization, or sale of assets, your Personal Data may be transferred as part of such a transaction, subject to applicable confidentiality agreements. 7. Data Security We implement appropriate technical and organizational measures to protect your Personal Data from unauthorized access, loss, destruction, or alteration. These measures include but are not limited to: Encryption of sensitive information during transmission and storage. Access controls, including multi-factor authentication, to restrict access to authorized personnel only. Regular security audits and assessments to identify vulnerabilities and ensure ongoing protection. However, please be aware that no data transmission or storage system can be guaranteed to be 100% secure. 8. Data Retention We retain Personal Data for as long as necessary to fulfill the purposes for which it was collected, as outlined in this Privacy Policy, and as required or permitted by applicable law. Once we no longer have a legitimate business need to process your Personal Data, we will either delete, anonymize, or securely store it until deletion is possible. 9. Your Rights Under Data Protection Laws Depending on your jurisdiction, you may have the following rights concerning your Personal Data: Right to Access: You have the right to request access to the Personal Data we hold about you and obtain a copy of it in a structured, commonly used format. Right to Rectification: You may request that we correct any inaccurate or incomplete information. Right to Erasure (\"Right to be Forgotten\"): You may request the deletion of your Personal Data, subject to certain legal obligations. Right to Restrict Processing: You may request that we limit the processing of your data under specific conditions. Right to Object: You may object to certain types of processing, such as direct marketing. Right to Data Portability: You have the right to request that your Personal Data be transferred to another controller in a machine-readable format. Right to Withdraw Consent: If we are processing your data based on your consent, you may withdraw your consent at any time, which will not affect the lawfulness of processing prior to the withdrawal. To exercise any of these rights, please contact us at [Insert Contact Information]. 10. Cookies and Similar Technologies We use cookies and similar tracking technologies to personalize your experience and gather information about the usage of our Services. You may manage cookie settings through your browser, but disabling cookies may affect your ability to access certain features of our platform. 11. Changes to This Privacy Policy We reserve the right to modify or update this Privacy Policy at any time in response to changes in applicable laws or our business practices. Any changes will be posted on our website, and the \"Effective Date\" will be updated accordingly. We encourage you to review this policy periodically. 12. Contact Us If you have any questions about this Privacy Policy, the handling of your Personal Data, or wish to exercise your privacy rights, please contact us: Stream Financial Technology Corporation Email: privacy@streamos.io","title":"Privacy Policy"},{"location":"product/","text":"Product Products or services provided by your organization to your customers. Products is just a generic term used to mean anything that you provide \u2013 it could be a data point served to a client, the number of legal hours billed. The Product Object The Essential Information Product Name : A concise name for the product/service (REQUIRED) Description : A descriptive name for the product/service Unit Price : A default price for the product Additional Fields for accounting systems - (OPTIONAL - depending on your accounting best practices) you can either provide these here or we collect them from your accounting manager on reconciliation Asset Account Id : The id of the asset account associated with this product Code : The accounting code associated with this product Discount Account Id : The account Id associated with discounts on this product Item Id : The Id of the item type : Inventory / Non-Inventory","title":"Product Object"},{"location":"product/#product","text":"Products or services provided by your organization to your customers. Products is just a generic term used to mean anything that you provide \u2013 it could be a data point served to a client, the number of legal hours billed.","title":"Product"},{"location":"product/#the-product-object","text":"","title":"The Product Object"},{"location":"product/#the-essential-information","text":"Product Name : A concise name for the product/service (REQUIRED) Description : A descriptive name for the product/service Unit Price : A default price for the product","title":"The Essential Information"},{"location":"product/#additional-fields-for-accounting-systems-optional-depending-on-your-accounting-best-practices","text":"you can either provide these here or we collect them from your accounting manager on reconciliation Asset Account Id : The id of the asset account associated with this product Code : The accounting code associated with this product Discount Account Id : The account Id associated with discounts on this product Item Id : The Id of the item type : Inventory / Non-Inventory","title":"Additional Fields for accounting systems - (OPTIONAL - depending on your accounting best practices)"},{"location":"reconciliation/","text":"DETAILS COMING SOON ....","title":"Reconciliation"},{"location":"reconciliation/#details-coming-soon","text":"","title":"DETAILS COMING SOON ...."},{"location":"simulations/","text":"Simulations are currently available only for developer API users (Human users will have access to a user friendly version shortly, please stay up to date by following streamOS for product updates) How simulations are setup ? Running simulations Viewing Results Use the code here Sample Code and run them against the /sim/... endpoints How simluations are setup ? Simulation environments bootstrap with all contracts, customers and products from your production environment. The /sim endpoints are simulation events and perform the same work as described in other sections except that they do not store data in production and are ephemeral (state recycles around system restarts etc.). Although our systems are largely up, state will be reset around system upgrades and catastrophical updates (like AWS going down) Running simulations Running simulations are almost exactly like working in a production environment except for a few changes - Usage: do not upload usage as you would regularly to your usage endpoint - instead structure your usage dataframe and pass it directly in to the /run endpoint as referenced here response = client.post(f'/contracts/{org_id}/factory/run', json={'usage': [{'date': '2024-02-29', 'product_id': product_id, 'contract_id': product_contract_id, 'quantity': 100}] }) customer_id: Specify the customer_id of the customer you would like to run the contracts for contract_id: Specify the contract_id of the contract you would like to run Please ensure that the contract_id in the usage schema is the contract_id of the Product Contract that wraps that product referenced. Viewing Results Results of simulations are returned from here . This is a pandas.multiindex dataframe once unpacked - with column headers reflecting each level of the contract that produces results: **index:** datetime index of charges events **columns:** [Parent Contract Info] [Sub Contract Info] [total amount of parent] [Plan Info] [total amount of sub contract] [unit amount] [quantity] [total amount] The way to process this information is to unwrap columns at each level and process the remaining dataframe to inspect details of how the prices were created.","title":"Simulations"},{"location":"simulations/#how-simluations-are-setup","text":"Simulation environments bootstrap with all contracts, customers and products from your production environment. The /sim endpoints are simulation events and perform the same work as described in other sections except that they do not store data in production and are ephemeral (state recycles around system restarts etc.). Although our systems are largely up, state will be reset around system upgrades and catastrophical updates (like AWS going down)","title":"How simluations are setup ?"},{"location":"simulations/#running-simulations","text":"Running simulations are almost exactly like working in a production environment except for a few changes - Usage: do not upload usage as you would regularly to your usage endpoint - instead structure your usage dataframe and pass it directly in to the /run endpoint as referenced here response = client.post(f'/contracts/{org_id}/factory/run', json={'usage': [{'date': '2024-02-29', 'product_id': product_id, 'contract_id': product_contract_id, 'quantity': 100}] }) customer_id: Specify the customer_id of the customer you would like to run the contracts for contract_id: Specify the contract_id of the contract you would like to run Please ensure that the contract_id in the usage schema is the contract_id of the Product Contract that wraps that product referenced.","title":"Running simulations"},{"location":"simulations/#viewing-results","text":"Results of simulations are returned from here . This is a pandas.multiindex dataframe once unpacked - with column headers reflecting each level of the contract that produces results: **index:** datetime index of charges events **columns:** [Parent Contract Info] [Sub Contract Info] [total amount of parent] [Plan Info] [total amount of sub contract] [unit amount] [quantity] [total amount] The way to process this information is to unwrap columns at each level and process the remaining dataframe to inspect details of how the prices were created.","title":"Viewing Results"},{"location":"tos/","text":"Stream Financial Technology Corporation TERMS OF SERVICE Last updated: 09/01/2024 1. AGREEMENT TO TERMS These Terms of Use constitute a legally binding agreement made between you, whether personally or on behalf of an entity (\u201cyou\u201d) and (Stream Financial TEchnology Corporation, \u201c we \u201d, \u201c us \u201d, or \u201c our \u201d), concerning your access to and use of the website as well as any other media form, media channel, mobile website or mobile application related, linked, or otherwise connected thereto (collectively, the \u201cSite\u201d). We are registered in Delaware, United States and have our registered office at 715 S 1100 E, Salt Lake City, Utah - 84102. You agree that by accessing the Site, you have read, understood, and agree to be bound by all of these Terms of Use. IF YOU DO NOT AGREE WITH ALL OF THESE TERMS OF USE, THEN YOU ARE EXPRESSLY PROHIBITED FROM USING THE SITE AND YOU MUST DISCONTINUE USE IMMEDIATELY. Supplemental terms and conditions or documents that may be posted on the Site from time to time are hereby expressly incorporated herein by reference. We reserve the right, in our sole discretion, to make changes or modifications to these Terms of Use at any time and for any reason. We will alert you about any changes by updating the \u201cLast updated\u201d date of these Terms of Use, and you waive any right to receive specific notice of each such change. Please ensure that you check the applicable Terms every time you use our Site so that you understand which Terms apply. You will be subject to, and will be deemed to have been made aware of and to have accepted, the changes in any revised Terms of Use by your continued use of the Site after the date such revised Terms of Use are posted. The information provided on the Site is not intended for distribution to or use by any person or entity in any jurisdiction or country where such distribution or use would be contrary to law or regulation or which would subject us to any registration requirement within such jurisdiction or country. Accordingly, those persons who choose to access the Site from other locations do so on their own initiative and are solely responsible for compliance with local laws, if and to the extent local laws are applicable. The Site is not tailored to comply with industry-specific regulations (Health Insurance Portability and Accountability Act (HIPAA), Federal Information Security Management Act (FISMA), etc.), so if your interactions would be subjected to such laws, you may not use this Site. You may not use the Site in a way that would violate the Gramm- Leach-Bliley Act (GLBA). The Site is intended for users who are at least 18 years old. Persons under the age of 18 are not permitted to use or register for the Site. 2. INTELLECTUAL PROPERTY RIGHTS Unless otherwise indicated, the Site is our proprietary property and all source code, databases, functionality, software, website designs, audio, video, text, photographs, and graphics on the Site (collectively, the \u201cContent\u201d) and the trademarks, service marks, and logos contained therein (the \u201cMarks\u201d) are owned or controlled by us or licensed to us, and are protected by copyright and trademark laws and various other intellectual property rights and unfair competition laws of the United States, international copyright laws, and international conventions. The Content and the Marks are provided on the Site \u201cAS IS\u201d for your information and personal use only. Except as expressly provided in these Terms of Use, no part of the Site and no Content or Marks may be copied, reproduced, aggregated, republished, uploaded, posted, publicly displayed, encoded, translated, transmitted, distributed, sold, licensed, or otherwise exploited for any commercial purpose whatsoever, without our express prior written permission. Provided that you are eligible to use the Site, you are granted a limited license to access and use the Site and to download or print a copy of any portion of the Content to which you have properly gained access solely for your personal, non-commercial use. We reserve all rights not expressly granted to you in and to the Site, the Content and the Marks. 3. USER REPRESENTATIONS By using the Site, you represent and warrant that: (1) you have the legal capacity and you agree to comply with these Terms of Use; (2) you are not a minor in the jurisdiction in which you reside; (3) you will not access the Site through automated or non-human means, whether through a bot, script or otherwise; (4) you will not use the Site for any illegal or unauthorized purpose; and (5) your use of the Site will not violate any applicable law or regulation. If you provide any information that is untrue, inaccurate, not current, or incomplete, we have the right to suspend or terminate your account and refuse any and all current or future use of the Site (or any portion thereof). 4. FEES AND PAYMENT We accept the following forms of payment: Bank Transfer You may be required to purchase or pay a fee to access some of our services. You agree to provide current, complete, and accurate purchase and account information for all purchases made via the Site. You further agree to promptly update account and payment information, including email address, payment method, and payment card expiration date, so that we can complete your transactions and contact you as needed. We bill you through an online billing account for purchases made via the Site. Sales tax will be added to the price of purchases as deemed required by us. We may change prices at any time. All payments shall be in U.S. dollars. You agree to pay all charges or fees at the prices then in effect for your purchases, and you authorize us to charge your chosen payment provider for any such amounts upon making your purchase. If your purchase is subject to recurring charges, then you consent to our charging your payment method on a recurring basis without requiring your prior approval for each recurring charge, until you notify us of your cancellation. We reserve the right to correct any errors or mistakes in pricing, even if we have already requested or received payment. We also reserve the right to refuse any order placed through the Site. 5. CANCELLATION You can cancel your subscription at any time by logging into your account or contacting us using the contact information provided below. Your cancellation will take effect at the end of the current paid term. If you are unsatisfied with our services, please email us at support@streamos.io . 6. PROHIBITED ACTIVITIES You may not access or use the Site for any purpose other than that for which we make the Site available. The Site may not be used in connection with any commercial endeavors except those that are specifically endorsed or approved by us. As a user of the Site, you agree not to: Systematically retrieve data or other content from the Site to create or compile, directly or indirectly, a collection, compilation, database, or directory without written permission from us. Trick, defraud, or mislead us and other users, especially in any attempt to learn sensitive account information such as user passwords. Circumvent, disable, or otherwise interfere with security-related features of the Site, including features that prevent or restrict the use or copying of any Content or enforce limitations on the use of the Site and/or the Content contained therein. Disparage, tarnish, or otherwise harm, in our opinion, us and/or the Site. Use any information obtained from the Site in order to harass, abuse, or harm another person. Make improper use of our support services or submit false reports of abuse or misconduct. Use the Site in a manner inconsistent with any applicable laws or regulations. Engage in unauthorized framing of or linking to the Site. Upload or transmit (or attempt to upload or to transmit) viruses, Trojan horses, or other material, including excessive use of capital letters and spamming (continuous posting of repetitive text), that interferes with any party\u2019s uninterrupted use and enjoyment of the Site or modifies, impairs, disrupts, alters, or interferes with the use, features, functions, operation, or maintenance of the Site. Engage in any automated use of the system, such as using scripts to send comments or messages, or using any data mining, robots, or similar data gathering and extraction tools. Delete the copyright or other proprietary rights notice from any Content. Attempt to impersonate another user or person or use the username of another user. Upload or transmit (or attempt to upload or to transmit) any material that acts as a passive or active information collection or transmission mechanism, including without limitation, clear graphics interchange formats (\u201cgifs\u201d), 1\u00d71 pixels, web bugs, cookies, or other similar devices (sometimes referred to as \u201cspyware\u201d or \u201cpassive collection mechanisms\u201d or \u201cpcms\u201d). Interfere with, disrupt, or create an undue burden on the Site or the networks or services connected to the Site. Harass, annoy, intimidate, or threaten any of our employees or agents engaged in providing any portion of the Site to you. Attempt to bypass any measures of the Site designed to prevent or restrict access to the Site, or any portion of the Site. Copy or adapt the Site\u2019s software, including but not limited to Flash, PHP, HTML, JavaScript, or other code. Except as permitted by applicable law, decipher, decompile, disassemble, or reverse engineer any of the software comprising or in any way making up a part of the Site. Except as may be the result of standard search engine or Internet browser usage, use, launch, develop, or distribute any automated system, including without limitation, any spider, robot, cheat utility, scraper, or offline reader that accesses the Site, or using or launching any unauthorized script or other software. Use a buying agent or purchasing agent to make purchases on the Site. Make any unauthorized use of the Site, including collecting usernames and/or email addresses of users by electronic or other means for the purpose of sending unsolicited email, or creating user accounts by automated means or under false pretenses. Use the Site as part of any effort to compete with us or otherwise use the Site and/or the Content for any revenue-generating endeavor or commercial enterprise. 7. USER GENERATED CONTRIBUTIONS The Site does not offer users to submit or post content. We may provide you with the opportunity to create, submit, post, display, transmit, perform, publish, distribute, or broadcast content and materials to us or on the Site, including but not limited to text, writings, video, audio, photographs, graphics, comments, suggestions, or personal information or other material (collectively, \"Contributions\"). Contributions may be viewable by other users of the Site and through third-party websites. As such, any Contributions you transmit may be treated in accordance with the Site Privacy Policy. When you create or make available any Contributions, you thereby represent and warrant that: The creation, distribution, transmission, public display, or performance, and the accessing, downloading, or copying of your Contributions do not and will not infringe the proprietary rights, including but not limited to the copyright, patent, trademark, trade secret, or moral rights of any third party. You are the creator and owner of or have the necessary licenses, rights, consents, releases, and permissions to use and to authorize us, the Site, and other users of the Site to use your Contributions in any manner contemplated by the Site and these Terms of Use. You have the written consent, release, and/or permission of each and every identifiable individual person in your Contributions to use the name or likeness of each and every such identifiable individual person to enable inclusion and use of your Contributions in any manner contemplated by the Site and these Terms of Use. Your Contributions are not false, inaccurate, or misleading. Your Contributions are not unsolicited or unauthorized advertising, promotional materials, pyramid schemes, chain letters, spam, mass mailings, or other forms of solicitation. Your Contributions are not obscene, lewd, lascivious, filthy, violent, harassing, libelous, slanderous, or otherwise objectionable (as determined by us). Your Contributions do not ridicule, mock, disparage, intimidate, or abuse anyone. Your Contributions are not used to harass or threaten (in the legal sense of those terms) any other person and to promote violence against a specific person or class of people. Your Contributions do not violate any applicable law, regulation, or rule. Your Contributions do not violate the privacy or publicity rights of any third party. Your Contributions do not violate any applicable law concerning child pornography, or otherwise intended to protect the health or well-being of minors. Your Contributions do not include any offensive comments that are connected to race, national origin, gender, sexual preference, or physical handicap. Your Contributions do not otherwise violate, or link to material that violates, any provision of these Terms of Use, or any applicable law or regulation. Any use of the Site in violation of the foregoing violates these Terms of Use and may result in, among other things, termination or suspension of your rights to use the Site. 8. CONTRIBUTION LICENSE You and the Site agree that we may access, store, process, and use any information and personal data that you provide following the terms of the Privacy Policy and your choices (including settings). By submitting suggestions or other feedback regarding the Site, you agree that we can use and share such feedback for any purpose without compensation to you. We do not assert any ownership over your Contributions. You retain full ownership of all of your Contributions and any intellectual property rights or other proprietary rights associated with your Contributions. We are not liable for any statements or representations in your Contributions provided by you in any area on the Site. You are solely responsible for your Contributions to the Site and you expressly agree to exonerate us from any and all responsibility and to refrain from any legal action against us regarding your Contributions. 9. SUBMISSIONS You acknowledge and agree that any questions, comments, suggestions, ideas, feedback, or other information regarding the Site (\"Submissions\") provided by you to us are non-confidential and shall become our sole property. We shall own exclusive rights, including all intellectual property rights, and shall be entitled to the unrestricted use and dissemination of these Submissions for any lawful purpose, commercial or otherwise, without acknowledgment or compensation to you. You hereby waive all moral rights to any such Submissions, and you hereby warrant that any such Submissions are original with you or that you have the right to submit such Submissions. You agree there shall be no recourse against us for any alleged or actual infringement or misappropriation of any proprietary right in your Submissions. 10. U.S. GOVERNMENT RIGHTS Our services are \u201ccommercial items\u201d as defined in Federal Acquisition Regulation (\u201cFAR\u201d) 2.101. If our services are acquired by or on behalf of any agency not within the Department of Defense (\u201cDOD\u201d), our services are subject to the terms of these Terms of Use in accordance with FAR 12.212 (for computer software) and FAR 12.211 (for technical data). If our services are acquired by or on behalf of any agency within the Department of Defense, our services are subject to the terms of these Terms of Use in accordance with Defense Federal Acquisition Regulation (\u201cDFARS\u201d) 227.7202 3. In addition, DFARS 252.227 7015 applies to technical data acquired by the DOD. This U.S. Government Rights clause is in lieu of, and supersedes, any other FAR, DFARS, or other clause or provision that addresses government rights in computer software or technical data under these Terms of Use. 11. SITE MANAGEMENT We reserve the right, but not the obligation, to: (1) monitor the Site for violations of these Terms of Use; (2) take appropriate legal action against anyone who, in our sole discretion, violates the law or these Terms of Use, including without limitation, reporting such user to law enforcement authorities; (3) in our sole discretion and without limitation, refuse, restrict access to, limit the availability of, or disable (to the extent technologically feasible) any of your Contributions or any portion thereof; (4) in our sole discretion and without limitation, notice, or liability, to remove from the Site or otherwise disable all files and content that are excessive in size or are in any way burdensome to our systems; and (5) otherwise manage the Site in a manner designed to protect our rights and property and to facilitate the proper functioning of the Site. You have surpassed your 1 policy limit. Please upgrade to publish additional policies. 12. TERM AND TERMINATION These Terms of Use shall remain in full force and effect while you use the Site. WITHOUT LIMITING ANY OTHER PROVISION OF THESE TERMS OF USE, WE RESERVE THE RIGHT TO, IN OUR SOLE DISCRETION AND WITHOUT NOTICE OR LIABILITY, DENY ACCESS TO AND USE OF THE SITE (INCLUDING BLOCKING CERTAIN IP ADDRESSES), TO ANY PERSON FOR ANY REASON OR FOR NO REASON, INCLUDING WITHOUT LIMITATION FOR BREACH OF ANY REPRESENTATION, WARRANTY, OR COVENANT CONTAINED IN THESE TERMS OF USE OR OF ANY APPLICABLE LAW OR REGULATION. WE MAY TERMINATE YOUR USE OR PARTICIPATION IN THE SITE OR DELETE ANY CONTENT OR INFORMATION THAT YOU POSTED AT ANY TIME, WITHOUT WARNING, IN OUR SOLE DISCRETION. If we terminate or suspend your account for any reason, you are prohibited from registering and creating a new account under your name, a fake or borrowed name, or the name of any third party, even if you may be acting on behalf of the third party. In addition to terminating or suspending your account, we reserve the right to take appropriate legal action, including without limitation pursuing civil, criminal, and injunctive redress. 13. MODIFICATIONS AND INTERRUPTIONS We reserve the right to change, modify, or remove the contents of the Site at any time or for any reason at our sole discretion without notice. However, we have no obligation to update any information on our Site. We also reserve the right to modify or discontinue all or part of the Site without notice at any time. We will not be liable to you or any third party for any modification, price change, suspension, or discontinuance of the Site. We cannot guarantee the Site will be available at all times. We may experience hardware, software, or other problems or need to perform maintenance related to the Site, resulting in interruptions, delays, or errors. We reserve the right to change, revise, update, suspend, discontinue, or otherwise modify the Site at any time or for any reason without notice to you. You agree that we have no liability whatsoever for any loss, damage, or inconvenience caused by your inability to access or use the Site during any downtime or discontinuance of the Site. Nothing in these Terms of Use will be construed to obligate us to maintain and support the Site or to supply any corrections, updates, or releases in connection therewith. 14. GOVERNING LAW These Terms shall be governed by and defined following the laws of USA and yourself irrevocably consent that the courts of USA shall have exclusive jurisdiction to resolve any dispute which may arise in connection with these terms. 15. DISPUTE RESOLUTION Informal Negotiations To expedite resolution and control the cost of any dispute, controversy, or claim related to these Terms of Use (each \"Dispute\" and collectively, the \u201cDisputes\u201d) brought by either you or us (individually, a \u201cParty\u201d and collectively, the \u201cParties\u201d), the Parties agree to first attempt to negotiate any Dispute (except those Disputes expressly provided below) informally for at least 90 days before initiating arbitration. Such informal negotiations commence upon written notice from one Party to the other Party. Binding Arbitration If the Parties are unable to resolve a Dispute through informal negotiations, the Dispute (except those Disputes expressly excluded below) will be finally and exclusively resolved by binding arbitration. YOU UNDERSTAND THAT WITHOUT THIS PROVISION, YOU WOULD HAVE THE RIGHT TO SUE IN COURT AND HAVE A JURY TRIAL. The arbitration shall be commenced and conducted under the Commercial Arbitration Rules of the American Arbitration Association (\"AAA\") and, where appropriate, the AAA\u2019s Supplementary Procedures for Consumer Related Disputes (\"AAA Consumer Rules\"), both of which are available at the AAA website . Your arbitration fees and your share of arbitrator compensation shall be governed by the AAA Consumer Rules and, where appropriate, limited by the AAA Consumer Rules. The arbitration may be conducted in person, through the submission of documents, by phone, or online. The arbitrator will make a decision in writing, but need not provide a statement of reasons unless requested by either Party. The arbitrator must follow applicable law, and any award may be challenged if the arbitrator fails to do so. Except where otherwise required by the applicable AAA rules or applicable law, the arbitration will take place in Delaware. Except as otherwise provided herein, the Parties may litigate in court to compel arbitration, stay proceedings pending arbitration, or to confirm, modify, vacate, or enter judgment on the award entered by the arbitrator. If for any reason, a Dispute proceeds in court rather than arbitration, the Dispute shall be commenced or prosecuted in the state and federal courts located in Delaware, and the Parties hereby consent to, and waive all defenses of lack of personal jurisdiction, and forum non conveniens with respect to venue and jurisdiction in such state and federal courts. Application of the United Nations Convention on Contracts for the International Sale of Goods and the Uniform Computer Information Transaction Act (UCITA) are excluded from these Terms of Use. If this provision is found to be illegal or unenforceable, then neither Party will elect to arbitrate any Dispute falling within that portion of this provision found to be illegal or unenforceable and such Dispute shall be decided by a court of competent jurisdiction within the courts listed for jurisdiction above, and the Parties agree to submit to the personal jurisdiction of that court. Restrictions The Parties agree that any arbitration shall be limited to the Dispute between the Parties individually. To the full extent permitted by law, (a) no arbitration shall be joined with any other proceeding; (b) there is no right or authority for any Dispute to be arbitrated on a class-action basis or to utilize class action procedures; and (c) there is no right or authority for any Dispute to be brought in a purported representative capacity on behalf of the general public or any other persons. Exceptions to Informal Negotiations and Arbitration The Parties agree that the following Disputes are not subject to the above provisions concerning informal negotiations and binding arbitration: (a) any Disputes seeking to enforce or protect, or concerning the validity of, any of the intellectual property rights of a Party; (b) any Dispute related to, or arising from, allegations of theft, piracy, invasion of privacy, or unauthorized use; and (c) any claim for injunctive relief. If this provision is found to be illegal or unenforceable, then neither Party will elect to arbitrate any Dispute falling within that portion of this provision found to be illegal or unenforceable and such Dispute shall be decided by a court of competent jurisdiction within the courts listed for jurisdiction above, and the Parties agree to submit to the personal jurisdiction of that court. 16. CORRECTIONS There may be information on the Site that contains typographical errors, inaccuracies, or omissions, including descriptions, pricing, availability, and various other information. We reserve the right to correct any errors, inaccuracies, or omissions and to change or update the information on the Site at any time, without prior notice. 17. DISCLAIMER THE SITE IS PROVIDED ON AN AS-IS AND AS-AVAILABLE BASIS. YOU AGREE THAT YOUR USE OF THE SITE AND OUR SERVICES WILL BE AT YOUR SOLE RISK. TO THE FULLEST EXTENT PERMITTED BY LAW, WE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION WITH THE SITE AND YOUR USE THEREOF, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. WE MAKE NO WARRANTIES OR REPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE SITE\u2019S CONTENT OR THE CONTENT OF ANY WEBSITES LINKED TO THE SITE AND WE WILL ASSUME NO LIABILITY OR RESPONSIBILITY FOR ANY (1) ERRORS, MISTAKES, OR INACCURACIES OF CONTENT AND MATERIALS, (2) PERSONAL INJURY OR PROPERTY DAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE OF THE SITE, (3) ANY UNAUTHORIZED ACCESS TO OR USE OF OUR SECURE SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL INFORMATION STORED THEREIN, (4) ANY INTERRUPTION OR CESSATION OF TRANSMISSION TO OR FROM THE SITE, (5) ANY BUGS, VIRUSES, TROJAN HORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE SITE BY ANY THIRD PARTY, AND/OR (6) ANY ERRORS OR OMISSIONS IN ANY CONTENT AND MATERIALS OR FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF ANY CONTENT POSTED, TRANSMITTED, OR OTHERWISE MADE AVAILABLE VIA THE SITE. WE DO NOT WARRANT, ENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE ADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE SITE, ANY HYPERLINKED WEBSITE, OR ANY WEBSITE OR MOBILE APPLICATION FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND WE WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING ANY TRANSACTION BETWEEN YOU AND ANY THIRD-PARTY PROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR SERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR BEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE. 18. LIMITATIONS OF LIABILITY IN NO EVENT WILL WE OR OUR DIRECTORS, EMPLOYEES, OR AGENTS BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL, OR PUNITIVE DAMAGES, INCLUDING LOST PROFIT, LOST REVENUE, LOSS OF DATA, OR OTHER DAMAGES ARISING FROM YOUR USE OF THE SITE, EVEN IF WE HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 19. INDEMNIFICATION You agree to defend, indemnify, and hold us harmless, including our subsidiaries, affiliates, and all of our respective officers, agents, partners, and employees, from and against any loss, damage, liability, claim, or demand, including reasonable attorneys\u2019 fees and expenses, made by any third party due to or arising out of: (1) use of the Site; (2) breach of these Terms of Use; (3) any breach of your representations and warranties set forth in these Terms of Use; (4) your violation of the rights of a third party, including but not limited to intellectual property rights; or (5) any overt harmful act toward any other user of the Site with whom you connected via the Site. Notwithstanding the foregoing, we reserve the right, at your expense, to assume the exclusive defense and control of any matter for which you are required to indemnify us, and you agree to cooperate, at your expense, with our defense of such claims. We will use reasonable efforts to notify you of any such claim, action, or proceeding which is subject to this indemnification upon becoming aware of it. 20. USER DATA We will maintain certain data that you transmit to the Site for the purpose of managing the performance of the Site, as well as data relating to your use of the Site. Although we perform regular routine backups of data, you are solely responsible for all data that you transmit or that relates to any activity you have undertaken using the Site. You agree that we shall have no liability to you for any loss or corruption of any such data, and you hereby waive any right of action against us arising from any such loss or corruption of such data. 21. ELECTRONIC COMMUNICATIONS, TRANSACTIONS, AND SIGNATURES Visiting the Site, sending us emails, and completing online forms constitute electronic communications. You consent to receive electronic communications, and you agree that all agreements, notices, disclosures, and other communications we provide to you electronically, via email and on the Site, satisfy any legal requirement that such communication be in writing. YOU HEREBY AGREE TO THE USE OF ELECTRONIC SIGNATURES, CONTRACTS, ORDERS, AND OTHER RECORDS, AND TO ELECTRONIC DELIVERY OF NOTICES, POLICIES, AND RECORDS OF TRANSACTIONS INITIATED OR COMPLETED BY US OR VIA THE SITE. You hereby waive any rights or requirements under any statutes, regulations, rules, ordinances, or other laws in any jurisdiction which require an original signature or delivery or retention of non-electronic records, or to payments or the granting of credits by any means other than electronic means. 22. MISCELLANEOUS These Terms of Use and any policies or operating rules posted by us on the Site or in respect to the Site constitute the entire agreement and understanding between you and us. Our failure to exercise or enforce any right or provision of these Terms of Use shall not operate as a waiver of such right or provision. These Terms of Use operate to the fullest extent permissible by law. We may assign any or all of our rights and obligations to others at any time. We shall not be responsible or liable for any loss, damage, delay, or failure to act caused by any cause beyond our reasonable control. If any provision or part of a provision of these Terms of Use is determined to be unlawful, void, or unenforceable, that provision or part of the provision is deemed severable from these Terms of Use and does not affect the validity and enforceability of any remaining provisions. There is no joint venture, partnership, employment or agency relationship created between you and us as a result of these Terms of Use or use of the Site. You agree that these Terms of Use will not be construed against us by virtue of having drafted them. You hereby waive any and all defenses you may have based on the electronic form of these Terms of Use and the lack of signing by the parties hereto to execute these Terms of Use. 23. CONTACT US In order to resolve a complaint regarding the Site or to receive further information regarding use of the Site, please contact us at: Email: support@streamos.io","title":"Terms of Service"},{"location":"tos/#1-agreement-to-terms","text":"These Terms of Use constitute a legally binding agreement made between you, whether personally or on behalf of an entity (\u201cyou\u201d) and (Stream Financial TEchnology Corporation, \u201c we \u201d, \u201c us \u201d, or \u201c our \u201d), concerning your access to and use of the website as well as any other media form, media channel, mobile website or mobile application related, linked, or otherwise connected thereto (collectively, the \u201cSite\u201d). We are registered in Delaware, United States and have our registered office at 715 S 1100 E, Salt Lake City, Utah - 84102. You agree that by accessing the Site, you have read, understood, and agree to be bound by all of these Terms of Use. IF YOU DO NOT AGREE WITH ALL OF THESE TERMS OF USE, THEN YOU ARE EXPRESSLY PROHIBITED FROM USING THE SITE AND YOU MUST DISCONTINUE USE IMMEDIATELY. Supplemental terms and conditions or documents that may be posted on the Site from time to time are hereby expressly incorporated herein by reference. We reserve the right, in our sole discretion, to make changes or modifications to these Terms of Use at any time and for any reason. We will alert you about any changes by updating the \u201cLast updated\u201d date of these Terms of Use, and you waive any right to receive specific notice of each such change. Please ensure that you check the applicable Terms every time you use our Site so that you understand which Terms apply. You will be subject to, and will be deemed to have been made aware of and to have accepted, the changes in any revised Terms of Use by your continued use of the Site after the date such revised Terms of Use are posted. The information provided on the Site is not intended for distribution to or use by any person or entity in any jurisdiction or country where such distribution or use would be contrary to law or regulation or which would subject us to any registration requirement within such jurisdiction or country. Accordingly, those persons who choose to access the Site from other locations do so on their own initiative and are solely responsible for compliance with local laws, if and to the extent local laws are applicable. The Site is not tailored to comply with industry-specific regulations (Health Insurance Portability and Accountability Act (HIPAA), Federal Information Security Management Act (FISMA), etc.), so if your interactions would be subjected to such laws, you may not use this Site. You may not use the Site in a way that would violate the Gramm- Leach-Bliley Act (GLBA). The Site is intended for users who are at least 18 years old. Persons under the age of 18 are not permitted to use or register for the Site.","title":"1. AGREEMENT TO TERMS"},{"location":"tos/#2-intellectual-property-rights","text":"Unless otherwise indicated, the Site is our proprietary property and all source code, databases, functionality, software, website designs, audio, video, text, photographs, and graphics on the Site (collectively, the \u201cContent\u201d) and the trademarks, service marks, and logos contained therein (the \u201cMarks\u201d) are owned or controlled by us or licensed to us, and are protected by copyright and trademark laws and various other intellectual property rights and unfair competition laws of the United States, international copyright laws, and international conventions. The Content and the Marks are provided on the Site \u201cAS IS\u201d for your information and personal use only. Except as expressly provided in these Terms of Use, no part of the Site and no Content or Marks may be copied, reproduced, aggregated, republished, uploaded, posted, publicly displayed, encoded, translated, transmitted, distributed, sold, licensed, or otherwise exploited for any commercial purpose whatsoever, without our express prior written permission. Provided that you are eligible to use the Site, you are granted a limited license to access and use the Site and to download or print a copy of any portion of the Content to which you have properly gained access solely for your personal, non-commercial use. We reserve all rights not expressly granted to you in and to the Site, the Content and the Marks.","title":"2. INTELLECTUAL PROPERTY RIGHTS"},{"location":"tos/#3-user-representations","text":"By using the Site, you represent and warrant that: (1) you have the legal capacity and you agree to comply with these Terms of Use; (2) you are not a minor in the jurisdiction in which you reside; (3) you will not access the Site through automated or non-human means, whether through a bot, script or otherwise; (4) you will not use the Site for any illegal or unauthorized purpose; and (5) your use of the Site will not violate any applicable law or regulation. If you provide any information that is untrue, inaccurate, not current, or incomplete, we have the right to suspend or terminate your account and refuse any and all current or future use of the Site (or any portion thereof).","title":"3. USER REPRESENTATIONS"},{"location":"tos/#4-fees-and-payment","text":"We accept the following forms of payment: Bank Transfer You may be required to purchase or pay a fee to access some of our services. You agree to provide current, complete, and accurate purchase and account information for all purchases made via the Site. You further agree to promptly update account and payment information, including email address, payment method, and payment card expiration date, so that we can complete your transactions and contact you as needed. We bill you through an online billing account for purchases made via the Site. Sales tax will be added to the price of purchases as deemed required by us. We may change prices at any time. All payments shall be in U.S. dollars. You agree to pay all charges or fees at the prices then in effect for your purchases, and you authorize us to charge your chosen payment provider for any such amounts upon making your purchase. If your purchase is subject to recurring charges, then you consent to our charging your payment method on a recurring basis without requiring your prior approval for each recurring charge, until you notify us of your cancellation. We reserve the right to correct any errors or mistakes in pricing, even if we have already requested or received payment. We also reserve the right to refuse any order placed through the Site.","title":"4. FEES AND PAYMENT"},{"location":"tos/#5-cancellation","text":"You can cancel your subscription at any time by logging into your account or contacting us using the contact information provided below. Your cancellation will take effect at the end of the current paid term. If you are unsatisfied with our services, please email us at support@streamos.io .","title":"5. CANCELLATION"},{"location":"tos/#6-prohibited-activities","text":"You may not access or use the Site for any purpose other than that for which we make the Site available. The Site may not be used in connection with any commercial endeavors except those that are specifically endorsed or approved by us. As a user of the Site, you agree not to: Systematically retrieve data or other content from the Site to create or compile, directly or indirectly, a collection, compilation, database, or directory without written permission from us. Trick, defraud, or mislead us and other users, especially in any attempt to learn sensitive account information such as user passwords. Circumvent, disable, or otherwise interfere with security-related features of the Site, including features that prevent or restrict the use or copying of any Content or enforce limitations on the use of the Site and/or the Content contained therein. Disparage, tarnish, or otherwise harm, in our opinion, us and/or the Site. Use any information obtained from the Site in order to harass, abuse, or harm another person. Make improper use of our support services or submit false reports of abuse or misconduct. Use the Site in a manner inconsistent with any applicable laws or regulations. Engage in unauthorized framing of or linking to the Site. Upload or transmit (or attempt to upload or to transmit) viruses, Trojan horses, or other material, including excessive use of capital letters and spamming (continuous posting of repetitive text), that interferes with any party\u2019s uninterrupted use and enjoyment of the Site or modifies, impairs, disrupts, alters, or interferes with the use, features, functions, operation, or maintenance of the Site. Engage in any automated use of the system, such as using scripts to send comments or messages, or using any data mining, robots, or similar data gathering and extraction tools. Delete the copyright or other proprietary rights notice from any Content. Attempt to impersonate another user or person or use the username of another user. Upload or transmit (or attempt to upload or to transmit) any material that acts as a passive or active information collection or transmission mechanism, including without limitation, clear graphics interchange formats (\u201cgifs\u201d), 1\u00d71 pixels, web bugs, cookies, or other similar devices (sometimes referred to as \u201cspyware\u201d or \u201cpassive collection mechanisms\u201d or \u201cpcms\u201d). Interfere with, disrupt, or create an undue burden on the Site or the networks or services connected to the Site. Harass, annoy, intimidate, or threaten any of our employees or agents engaged in providing any portion of the Site to you. Attempt to bypass any measures of the Site designed to prevent or restrict access to the Site, or any portion of the Site. Copy or adapt the Site\u2019s software, including but not limited to Flash, PHP, HTML, JavaScript, or other code. Except as permitted by applicable law, decipher, decompile, disassemble, or reverse engineer any of the software comprising or in any way making up a part of the Site. Except as may be the result of standard search engine or Internet browser usage, use, launch, develop, or distribute any automated system, including without limitation, any spider, robot, cheat utility, scraper, or offline reader that accesses the Site, or using or launching any unauthorized script or other software. Use a buying agent or purchasing agent to make purchases on the Site. Make any unauthorized use of the Site, including collecting usernames and/or email addresses of users by electronic or other means for the purpose of sending unsolicited email, or creating user accounts by automated means or under false pretenses. Use the Site as part of any effort to compete with us or otherwise use the Site and/or the Content for any revenue-generating endeavor or commercial enterprise.","title":"6. PROHIBITED ACTIVITIES"},{"location":"tos/#7-user-generated-contributions","text":"The Site does not offer users to submit or post content. We may provide you with the opportunity to create, submit, post, display, transmit, perform, publish, distribute, or broadcast content and materials to us or on the Site, including but not limited to text, writings, video, audio, photographs, graphics, comments, suggestions, or personal information or other material (collectively, \"Contributions\"). Contributions may be viewable by other users of the Site and through third-party websites. As such, any Contributions you transmit may be treated in accordance with the Site Privacy Policy. When you create or make available any Contributions, you thereby represent and warrant that: The creation, distribution, transmission, public display, or performance, and the accessing, downloading, or copying of your Contributions do not and will not infringe the proprietary rights, including but not limited to the copyright, patent, trademark, trade secret, or moral rights of any third party. You are the creator and owner of or have the necessary licenses, rights, consents, releases, and permissions to use and to authorize us, the Site, and other users of the Site to use your Contributions in any manner contemplated by the Site and these Terms of Use. You have the written consent, release, and/or permission of each and every identifiable individual person in your Contributions to use the name or likeness of each and every such identifiable individual person to enable inclusion and use of your Contributions in any manner contemplated by the Site and these Terms of Use. Your Contributions are not false, inaccurate, or misleading. Your Contributions are not unsolicited or unauthorized advertising, promotional materials, pyramid schemes, chain letters, spam, mass mailings, or other forms of solicitation. Your Contributions are not obscene, lewd, lascivious, filthy, violent, harassing, libelous, slanderous, or otherwise objectionable (as determined by us). Your Contributions do not ridicule, mock, disparage, intimidate, or abuse anyone. Your Contributions are not used to harass or threaten (in the legal sense of those terms) any other person and to promote violence against a specific person or class of people. Your Contributions do not violate any applicable law, regulation, or rule. Your Contributions do not violate the privacy or publicity rights of any third party. Your Contributions do not violate any applicable law concerning child pornography, or otherwise intended to protect the health or well-being of minors. Your Contributions do not include any offensive comments that are connected to race, national origin, gender, sexual preference, or physical handicap. Your Contributions do not otherwise violate, or link to material that violates, any provision of these Terms of Use, or any applicable law or regulation. Any use of the Site in violation of the foregoing violates these Terms of Use and may result in, among other things, termination or suspension of your rights to use the Site.","title":"7. USER GENERATED CONTRIBUTIONS"},{"location":"tos/#8-contribution-license","text":"You and the Site agree that we may access, store, process, and use any information and personal data that you provide following the terms of the Privacy Policy and your choices (including settings). By submitting suggestions or other feedback regarding the Site, you agree that we can use and share such feedback for any purpose without compensation to you. We do not assert any ownership over your Contributions. You retain full ownership of all of your Contributions and any intellectual property rights or other proprietary rights associated with your Contributions. We are not liable for any statements or representations in your Contributions provided by you in any area on the Site. You are solely responsible for your Contributions to the Site and you expressly agree to exonerate us from any and all responsibility and to refrain from any legal action against us regarding your Contributions.","title":"8. CONTRIBUTION LICENSE"},{"location":"tos/#9-submissions","text":"You acknowledge and agree that any questions, comments, suggestions, ideas, feedback, or other information regarding the Site (\"Submissions\") provided by you to us are non-confidential and shall become our sole property. We shall own exclusive rights, including all intellectual property rights, and shall be entitled to the unrestricted use and dissemination of these Submissions for any lawful purpose, commercial or otherwise, without acknowledgment or compensation to you. You hereby waive all moral rights to any such Submissions, and you hereby warrant that any such Submissions are original with you or that you have the right to submit such Submissions. You agree there shall be no recourse against us for any alleged or actual infringement or misappropriation of any proprietary right in your Submissions.","title":"9. SUBMISSIONS"},{"location":"tos/#10-us-government-rights","text":"Our services are \u201ccommercial items\u201d as defined in Federal Acquisition Regulation (\u201cFAR\u201d) 2.101. If our services are acquired by or on behalf of any agency not within the Department of Defense (\u201cDOD\u201d), our services are subject to the terms of these Terms of Use in accordance with FAR 12.212 (for computer software) and FAR 12.211 (for technical data). If our services are acquired by or on behalf of any agency within the Department of Defense, our services are subject to the terms of these Terms of Use in accordance with Defense Federal Acquisition Regulation (\u201cDFARS\u201d) 227.7202 3. In addition, DFARS 252.227 7015 applies to technical data acquired by the DOD. This U.S. Government Rights clause is in lieu of, and supersedes, any other FAR, DFARS, or other clause or provision that addresses government rights in computer software or technical data under these Terms of Use.","title":"10. U.S. GOVERNMENT RIGHTS"},{"location":"tos/#11-site-management","text":"We reserve the right, but not the obligation, to: (1) monitor the Site for violations of these Terms of Use; (2) take appropriate legal action against anyone who, in our sole discretion, violates the law or these Terms of Use, including without limitation, reporting such user to law enforcement authorities; (3) in our sole discretion and without limitation, refuse, restrict access to, limit the availability of, or disable (to the extent technologically feasible) any of your Contributions or any portion thereof; (4) in our sole discretion and without limitation, notice, or liability, to remove from the Site or otherwise disable all files and content that are excessive in size or are in any way burdensome to our systems; and (5) otherwise manage the Site in a manner designed to protect our rights and property and to facilitate the proper functioning of the Site. You have surpassed your 1 policy limit. Please upgrade to publish additional policies.","title":"11. SITE MANAGEMENT"},{"location":"tos/#12-term-and-termination","text":"These Terms of Use shall remain in full force and effect while you use the Site. WITHOUT LIMITING ANY OTHER PROVISION OF THESE TERMS OF USE, WE RESERVE THE RIGHT TO, IN OUR SOLE DISCRETION AND WITHOUT NOTICE OR LIABILITY, DENY ACCESS TO AND USE OF THE SITE (INCLUDING BLOCKING CERTAIN IP ADDRESSES), TO ANY PERSON FOR ANY REASON OR FOR NO REASON, INCLUDING WITHOUT LIMITATION FOR BREACH OF ANY REPRESENTATION, WARRANTY, OR COVENANT CONTAINED IN THESE TERMS OF USE OR OF ANY APPLICABLE LAW OR REGULATION. WE MAY TERMINATE YOUR USE OR PARTICIPATION IN THE SITE OR DELETE ANY CONTENT OR INFORMATION THAT YOU POSTED AT ANY TIME, WITHOUT WARNING, IN OUR SOLE DISCRETION. If we terminate or suspend your account for any reason, you are prohibited from registering and creating a new account under your name, a fake or borrowed name, or the name of any third party, even if you may be acting on behalf of the third party. In addition to terminating or suspending your account, we reserve the right to take appropriate legal action, including without limitation pursuing civil, criminal, and injunctive redress.","title":"12. TERM AND TERMINATION"},{"location":"tos/#13-modifications-and-interruptions","text":"We reserve the right to change, modify, or remove the contents of the Site at any time or for any reason at our sole discretion without notice. However, we have no obligation to update any information on our Site. We also reserve the right to modify or discontinue all or part of the Site without notice at any time. We will not be liable to you or any third party for any modification, price change, suspension, or discontinuance of the Site. We cannot guarantee the Site will be available at all times. We may experience hardware, software, or other problems or need to perform maintenance related to the Site, resulting in interruptions, delays, or errors. We reserve the right to change, revise, update, suspend, discontinue, or otherwise modify the Site at any time or for any reason without notice to you. You agree that we have no liability whatsoever for any loss, damage, or inconvenience caused by your inability to access or use the Site during any downtime or discontinuance of the Site. Nothing in these Terms of Use will be construed to obligate us to maintain and support the Site or to supply any corrections, updates, or releases in connection therewith.","title":"13. MODIFICATIONS AND INTERRUPTIONS"},{"location":"tos/#14-governing-law","text":"These Terms shall be governed by and defined following the laws of USA and yourself irrevocably consent that the courts of USA shall have exclusive jurisdiction to resolve any dispute which may arise in connection with these terms.","title":"14. GOVERNING LAW"},{"location":"tos/#15-dispute-resolution-informal-negotiations","text":"To expedite resolution and control the cost of any dispute, controversy, or claim related to these Terms of Use (each \"Dispute\" and collectively, the \u201cDisputes\u201d) brought by either you or us (individually, a \u201cParty\u201d and collectively, the \u201cParties\u201d), the Parties agree to first attempt to negotiate any Dispute (except those Disputes expressly provided below) informally for at least 90 days before initiating arbitration. Such informal negotiations commence upon written notice from one Party to the other Party. Binding Arbitration If the Parties are unable to resolve a Dispute through informal negotiations, the Dispute (except those Disputes expressly excluded below) will be finally and exclusively resolved by binding arbitration. YOU UNDERSTAND THAT WITHOUT THIS PROVISION, YOU WOULD HAVE THE RIGHT TO SUE IN COURT AND HAVE A JURY TRIAL. The arbitration shall be commenced and conducted under the Commercial Arbitration Rules of the American Arbitration Association (\"AAA\") and, where appropriate, the AAA\u2019s Supplementary Procedures for Consumer Related Disputes (\"AAA Consumer Rules\"), both of which are available at the AAA website . Your arbitration fees and your share of arbitrator compensation shall be governed by the AAA Consumer Rules and, where appropriate, limited by the AAA Consumer Rules. The arbitration may be conducted in person, through the submission of documents, by phone, or online. The arbitrator will make a decision in writing, but need not provide a statement of reasons unless requested by either Party. The arbitrator must follow applicable law, and any award may be challenged if the arbitrator fails to do so. Except where otherwise required by the applicable AAA rules or applicable law, the arbitration will take place in Delaware. Except as otherwise provided herein, the Parties may litigate in court to compel arbitration, stay proceedings pending arbitration, or to confirm, modify, vacate, or enter judgment on the award entered by the arbitrator. If for any reason, a Dispute proceeds in court rather than arbitration, the Dispute shall be commenced or prosecuted in the state and federal courts located in Delaware, and the Parties hereby consent to, and waive all defenses of lack of personal jurisdiction, and forum non conveniens with respect to venue and jurisdiction in such state and federal courts. Application of the United Nations Convention on Contracts for the International Sale of Goods and the Uniform Computer Information Transaction Act (UCITA) are excluded from these Terms of Use. If this provision is found to be illegal or unenforceable, then neither Party will elect to arbitrate any Dispute falling within that portion of this provision found to be illegal or unenforceable and such Dispute shall be decided by a court of competent jurisdiction within the courts listed for jurisdiction above, and the Parties agree to submit to the personal jurisdiction of that court. Restrictions The Parties agree that any arbitration shall be limited to the Dispute between the Parties individually. To the full extent permitted by law, (a) no arbitration shall be joined with any other proceeding; (b) there is no right or authority for any Dispute to be arbitrated on a class-action basis or to utilize class action procedures; and (c) there is no right or authority for any Dispute to be brought in a purported representative capacity on behalf of the general public or any other persons. Exceptions to Informal Negotiations and Arbitration The Parties agree that the following Disputes are not subject to the above provisions concerning informal negotiations and binding arbitration: (a) any Disputes seeking to enforce or protect, or concerning the validity of, any of the intellectual property rights of a Party; (b) any Dispute related to, or arising from, allegations of theft, piracy, invasion of privacy, or unauthorized use; and (c) any claim for injunctive relief. If this provision is found to be illegal or unenforceable, then neither Party will elect to arbitrate any Dispute falling within that portion of this provision found to be illegal or unenforceable and such Dispute shall be decided by a court of competent jurisdiction within the courts listed for jurisdiction above, and the Parties agree to submit to the personal jurisdiction of that court.","title":"15. DISPUTE RESOLUTION Informal Negotiations"},{"location":"tos/#16-corrections","text":"There may be information on the Site that contains typographical errors, inaccuracies, or omissions, including descriptions, pricing, availability, and various other information. We reserve the right to correct any errors, inaccuracies, or omissions and to change or update the information on the Site at any time, without prior notice.","title":"16. CORRECTIONS"},{"location":"tos/#17-disclaimer","text":"THE SITE IS PROVIDED ON AN AS-IS AND AS-AVAILABLE BASIS. YOU AGREE THAT YOUR USE OF THE SITE AND OUR SERVICES WILL BE AT YOUR SOLE RISK. TO THE FULLEST EXTENT PERMITTED BY LAW, WE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION WITH THE SITE AND YOUR USE THEREOF, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. WE MAKE NO WARRANTIES OR REPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE SITE\u2019S CONTENT OR THE CONTENT OF ANY WEBSITES LINKED TO THE SITE AND WE WILL ASSUME NO LIABILITY OR RESPONSIBILITY FOR ANY (1) ERRORS, MISTAKES, OR INACCURACIES OF CONTENT AND MATERIALS, (2) PERSONAL INJURY OR PROPERTY DAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE OF THE SITE, (3) ANY UNAUTHORIZED ACCESS TO OR USE OF OUR SECURE SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL INFORMATION STORED THEREIN, (4) ANY INTERRUPTION OR CESSATION OF TRANSMISSION TO OR FROM THE SITE, (5) ANY BUGS, VIRUSES, TROJAN HORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE SITE BY ANY THIRD PARTY, AND/OR (6) ANY ERRORS OR OMISSIONS IN ANY CONTENT AND MATERIALS OR FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF ANY CONTENT POSTED, TRANSMITTED, OR OTHERWISE MADE AVAILABLE VIA THE SITE. WE DO NOT WARRANT, ENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE ADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE SITE, ANY HYPERLINKED WEBSITE, OR ANY WEBSITE OR MOBILE APPLICATION FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND WE WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING ANY TRANSACTION BETWEEN YOU AND ANY THIRD-PARTY PROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR SERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR BEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE.","title":"17. DISCLAIMER"},{"location":"tos/#18-limitations-of-liability","text":"IN NO EVENT WILL WE OR OUR DIRECTORS, EMPLOYEES, OR AGENTS BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL, OR PUNITIVE DAMAGES, INCLUDING LOST PROFIT, LOST REVENUE, LOSS OF DATA, OR OTHER DAMAGES ARISING FROM YOUR USE OF THE SITE, EVEN IF WE HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"18. LIMITATIONS OF LIABILITY"},{"location":"tos/#19-indemnification","text":"You agree to defend, indemnify, and hold us harmless, including our subsidiaries, affiliates, and all of our respective officers, agents, partners, and employees, from and against any loss, damage, liability, claim, or demand, including reasonable attorneys\u2019 fees and expenses, made by any third party due to or arising out of: (1) use of the Site; (2) breach of these Terms of Use; (3) any breach of your representations and warranties set forth in these Terms of Use; (4) your violation of the rights of a third party, including but not limited to intellectual property rights; or (5) any overt harmful act toward any other user of the Site with whom you connected via the Site. Notwithstanding the foregoing, we reserve the right, at your expense, to assume the exclusive defense and control of any matter for which you are required to indemnify us, and you agree to cooperate, at your expense, with our defense of such claims. We will use reasonable efforts to notify you of any such claim, action, or proceeding which is subject to this indemnification upon becoming aware of it.","title":"19. INDEMNIFICATION"},{"location":"tos/#20-user-data","text":"We will maintain certain data that you transmit to the Site for the purpose of managing the performance of the Site, as well as data relating to your use of the Site. Although we perform regular routine backups of data, you are solely responsible for all data that you transmit or that relates to any activity you have undertaken using the Site. You agree that we shall have no liability to you for any loss or corruption of any such data, and you hereby waive any right of action against us arising from any such loss or corruption of such data.","title":"20. USER DATA"},{"location":"tos/#21-electronic-communications-transactions-and-signatures","text":"Visiting the Site, sending us emails, and completing online forms constitute electronic communications. You consent to receive electronic communications, and you agree that all agreements, notices, disclosures, and other communications we provide to you electronically, via email and on the Site, satisfy any legal requirement that such communication be in writing. YOU HEREBY AGREE TO THE USE OF ELECTRONIC SIGNATURES, CONTRACTS, ORDERS, AND OTHER RECORDS, AND TO ELECTRONIC DELIVERY OF NOTICES, POLICIES, AND RECORDS OF TRANSACTIONS INITIATED OR COMPLETED BY US OR VIA THE SITE. You hereby waive any rights or requirements under any statutes, regulations, rules, ordinances, or other laws in any jurisdiction which require an original signature or delivery or retention of non-electronic records, or to payments or the granting of credits by any means other than electronic means.","title":"21. ELECTRONIC COMMUNICATIONS, TRANSACTIONS, AND SIGNATURES"},{"location":"tos/#22-miscellaneous","text":"These Terms of Use and any policies or operating rules posted by us on the Site or in respect to the Site constitute the entire agreement and understanding between you and us. Our failure to exercise or enforce any right or provision of these Terms of Use shall not operate as a waiver of such right or provision. These Terms of Use operate to the fullest extent permissible by law. We may assign any or all of our rights and obligations to others at any time. We shall not be responsible or liable for any loss, damage, delay, or failure to act caused by any cause beyond our reasonable control. If any provision or part of a provision of these Terms of Use is determined to be unlawful, void, or unenforceable, that provision or part of the provision is deemed severable from these Terms of Use and does not affect the validity and enforceability of any remaining provisions. There is no joint venture, partnership, employment or agency relationship created between you and us as a result of these Terms of Use or use of the Site. You agree that these Terms of Use will not be construed against us by virtue of having drafted them. You hereby waive any and all defenses you may have based on the electronic form of these Terms of Use and the lack of signing by the parties hereto to execute these Terms of Use.","title":"22. MISCELLANEOUS"},{"location":"tos/#23-contact-us","text":"In order to resolve a complaint regarding the Site or to receive further information regarding use of the Site, please contact us at: Email: support@streamos.io","title":"23. CONTACT US"},{"location":"usage/","text":"Usage The Usage object is the store of actual usage of products and services of your organization. Usage is associated with a Product ( product_id ) and a ProductContract ( contract_id ) that wraps billing information about an instance of that product. The above structure allows for customers to record usage for their clients against multi use-cases under the same contract. Example Company A sells an Employee Verification Product to both Youtube and Google Voice. However, they have a contract with their parent Google and invoice them once. Parent Contract: Google Sub Contract: YouTube Product Contract: - contract_id: xxxxxx - product: Employee Verification (`product_id`: yyyyyy) Sub Contract: Google Voice Product Contract: - contract_id: aaaaaa - product: Employee Verification (`product_id`: yyyyyy) Their usage data would therefore look like: date contract_id product_id quantity 2024-1-1 xxxxxx yyyyyy 123 2024-1-1 aaaaaa yyyyyy 12 2024-1-2 xxxxxx yyyyyy 56 2024-1-3 xxxxxx yyyyyy 4 2024-1-3 aaaaaa yyyyyy 7 2024-1-4 xxxxxx yyyyyy 8 2024-1-5 aaaaaa yyyyyy 9 The above structure would reflect billables toward YouTube and Google Voice separately but would also allow roll-ups to the parent Google.","title":"Usage Object"},{"location":"usage/#usage","text":"The Usage object is the store of actual usage of products and services of your organization. Usage is associated with a Product ( product_id ) and a ProductContract ( contract_id ) that wraps billing information about an instance of that product. The above structure allows for customers to record usage for their clients against multi use-cases under the same contract. Example Company A sells an Employee Verification Product to both Youtube and Google Voice. However, they have a contract with their parent Google and invoice them once. Parent Contract: Google Sub Contract: YouTube Product Contract: - contract_id: xxxxxx - product: Employee Verification (`product_id`: yyyyyy) Sub Contract: Google Voice Product Contract: - contract_id: aaaaaa - product: Employee Verification (`product_id`: yyyyyy) Their usage data would therefore look like: date contract_id product_id quantity 2024-1-1 xxxxxx yyyyyy 123 2024-1-1 aaaaaa yyyyyy 12 2024-1-2 xxxxxx yyyyyy 56 2024-1-3 xxxxxx yyyyyy 4 2024-1-3 aaaaaa yyyyyy 7 2024-1-4 xxxxxx yyyyyy 8 2024-1-5 aaaaaa yyyyyy 9 The above structure would reflect billables toward YouTube and Google Voice separately but would also allow roll-ups to the parent Google.","title":"Usage"},{"location":"users/","text":"Users streamOS has a light weight user model. Operational User: Permissions to create items and events within the system (with approval). Creation events like contract,customer & product creation can be made by this user. However, all events need to be approved by a user with manager permissions before they become active. Operational Manager: All permissions of operational user + permissions to approve requests from operational users. NOTE: Operational Manager's cannot approve their own requests. Administrative User: Ability to setup changes in the system. Create new plan types that can be applied to other contracts. Administrative Manager: Approve permissions for requests by Administrative Users. As well as core system event such as setting up and managing integrations, users and other core system(s). Actions like final invoice approval, contract editing approval and other key functions are part of this users permissions.","title":"Users"},{"location":"users/#users","text":"streamOS has a light weight user model. Operational User: Permissions to create items and events within the system (with approval). Creation events like contract,customer & product creation can be made by this user. However, all events need to be approved by a user with manager permissions before they become active. Operational Manager: All permissions of operational user + permissions to approve requests from operational users. NOTE: Operational Manager's cannot approve their own requests. Administrative User: Ability to setup changes in the system. Create new plan types that can be applied to other contracts. Administrative Manager: Approve permissions for requests by Administrative Users. As well as core system event such as setting up and managing integrations, users and other core system(s). Actions like final invoice approval, contract editing approval and other key functions are part of this users permissions.","title":"Users"}]}