{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to streamOS","title":"Home"},{"location":"#welcome-to-streamos","text":"","title":"Welcome to streamOS"},{"location":"about/","text":"Introduction Contract2Cash streamOS:Contract2Cash \u2013 Module enables companies to create, measure, bill and reconcile the entire contract 2 cash process for complex, small and large scale billing processes. From setting up complex contract structures, viewing usage and real-time charges \u2013 this document will walk you through our primary modules, interaction structures and how best to utilize the power of the financial operating system to best suit your needs. As always contact your streamOS sales representative or email us for any further question you may have.","title":"Introduction"},{"location":"about/#introduction","text":"","title":"Introduction"},{"location":"about/#contract2cash","text":"streamOS:Contract2Cash \u2013 Module enables companies to create, measure, bill and reconcile the entire contract 2 cash process for complex, small and large scale billing processes. From setting up complex contract structures, viewing usage and real-time charges \u2013 this document will walk you through our primary modules, interaction structures and how best to utilize the power of the financial operating system to best suit your needs. As always contact your streamOS sales representative or email us for any further question you may have.","title":"Contract2Cash"},{"location":"api-howto/","text":"How to - APIs Recursive Contract Construction Setup Flow Operational Flow Modifications and Updates General Principles Recursive Contract Construction Constructing objects in streamOS is recursive, start with the lowest in the tree and continue building upwards through the hierarchy. Every reference to a UUID in a POST is an id of an object returned from another POST statement. streamOS maintains a factory that it references for all of these objects and links them together on run time. The Parent Contract is your ultimate tie in to the customer, so until the Parent Contract is created - contracts are orphans. Plans and Contracts can be reused - so once created you can use them over and over in other create objects for free, by just referencing the id. Overall Setup Flow The overall flow of creation follows this pattern: Create Customers: Create all the customers in streamOS appropriately and store the streamOS customer_ids Create Products: Create all the customers in streamOS appropriately and store the streamOS customer_ids Create Contracts: Create the appropriate contract structure that represent your contracts, verify using the UI if required Operational Flow Structure Usage: Ensure your usage flow is of the format specified in the /contracts/org_id/usage endpoint Get Charges: Every update of usage or a contract upload / update triggers a run of the contracts - use the charges endpoint to get the results. Force a contract run: if you want to force a contract run trigger this Modifications & Updates Modifying Contracts: Modifying contracts in streamOS is tantamount to creating a new contract. You would provide the same information as you did during contract creation to the same endpoint, except for the information that you are changing. Ensure you use the same id as the object you are replacing so that the system knows to replace existing references to it. Modifying Plans: Plans are modified in a similar fashion - post the modified information to the same endpoint with the same id to replace a plan definition. However, now that a plan has been changed - call the refresh endpoint to ensure that all contracts that reference this plan update their local copies of the plan.","title":"How-To"},{"location":"api-howto/#how-to-apis","text":"Recursive Contract Construction Setup Flow Operational Flow Modifications and Updates","title":"How to - APIs"},{"location":"api-howto/#general-principles","text":"","title":"General Principles"},{"location":"api-howto/#recursive-contract-construction","text":"Constructing objects in streamOS is recursive, start with the lowest in the tree and continue building upwards through the hierarchy. Every reference to a UUID in a POST is an id of an object returned from another POST statement. streamOS maintains a factory that it references for all of these objects and links them together on run time. The Parent Contract is your ultimate tie in to the customer, so until the Parent Contract is created - contracts are orphans. Plans and Contracts can be reused - so once created you can use them over and over in other create objects for free, by just referencing the id.","title":"Recursive Contract Construction"},{"location":"api-howto/#overall-setup-flow","text":"The overall flow of creation follows this pattern: Create Customers: Create all the customers in streamOS appropriately and store the streamOS customer_ids Create Products: Create all the customers in streamOS appropriately and store the streamOS customer_ids Create Contracts: Create the appropriate contract structure that represent your contracts, verify using the UI if required","title":"Overall Setup Flow"},{"location":"api-howto/#operational-flow","text":"Structure Usage: Ensure your usage flow is of the format specified in the /contracts/org_id/usage endpoint Get Charges: Every update of usage or a contract upload / update triggers a run of the contracts - use the charges endpoint to get the results. Force a contract run: if you want to force a contract run trigger this","title":"Operational Flow"},{"location":"api-howto/#modifications-updates","text":"Modifying Contracts: Modifying contracts in streamOS is tantamount to creating a new contract. You would provide the same information as you did during contract creation to the same endpoint, except for the information that you are changing. Ensure you use the same id as the object you are replacing so that the system knows to replace existing references to it. Modifying Plans: Plans are modified in a similar fashion - post the modified information to the same endpoint with the same id to replace a plan definition. However, now that a plan has been changed - call the refresh endpoint to ensure that all contracts that reference this plan update their local copies of the plan.","title":"Modifications &amp; Updates"},{"location":"bot/","text":"The streamOS Bot The streamOS Bot is the primary mode of communication between our platform and its users. You can find it in the App's section of your slack installation. Once you get there it is self explanatory There are 3 sections on the top of the page : Home:: This is your home base for streamOS where you receive summary of important information about our platform. Go to Explorer: Click this to navigate to our web home Messages:: This is your direct message channel between you and the platform. The bot will send you notifications and requests on this channel. Type /streamos help to start interacting with the platform.","title":"The streamOS Bot"},{"location":"bot/#the-streamos-bot","text":"The streamOS Bot is the primary mode of communication between our platform and its users. You can find it in the App's section of your slack installation. Once you get there it is self explanatory There are 3 sections on the top of the page : Home:: This is your home base for streamOS where you receive summary of important information about our platform. Go to Explorer: Click this to navigate to our web home Messages:: This is your direct message channel between you and the platform. The bot will send you notifications and requests on this channel. Type /streamos help to start interacting with the platform.","title":"The streamOS Bot"},{"location":"contracts/","text":"Contracts Contracts in streamOS are business logic elements that store financial logic of how to charge a customer. Key Elements: Contract Types Parent Contract Sub-Contract Product Contract Plans Fixed Fee Plans Usage Based Plans Modifiers Minimums Discounts Credits Renewals Billing Frequency Contract Examples Contract Types Contracts in streamOS are containers that decide how billing elements (plans / modifiers) are charged (frequency) and how they interact with each other. They define dates (start, end, how often) and sequence, they do not define how much (these are handled by plans and modifiers) Parent Contract Parent Contracts are top level contracts that are directly linked with a customer. These are overarching concepts that are containers for all related elements and can action on all items below them. Any direct items associated with them are indicative of the fact that they will be charged just because the contract exists and for no other reason. A Parent Contract contains the following elements: Display Name : The Name of the Parent Contract - usually named something simple - 'Company A Master Agreement' Customer ID : The id of the customer associated with this contract Payment Terms : in days - translated directly to the accounting platform as issue_date + days Start Date : The Start Date of the contract End Date : The End Date of the contract Fixed Fees : [List of FixedFee] : Any fixed fees associated with this contract Minimums : [Minimum] Any minimums associated with this contract - (this will be applied after all charges are totaled) Discounts : [Discount] Any discounts that need to be applied after all the charges are totaled Auto-Renewals : [Auto-Renewal] Logic about renewal of the contract Sub-Contracts : [List of SubContract ] Sub-Contracts associated with this parent Billing Frequency : [Billing-Frequency] Specifies how all aspects of charges in this contract should be billed Sub-Contract Sub-Contracts are exactly like Parent Contracts except that they do not link to customer's and hence cannot live without a Parent Contract. They are useful concepts to separate units of billables by dates, billing frequencies or other behaviors. Sub-Contracts are infinitely nestable - meaning that a sub-contract can have infinite children, where each child is subject to the parent. Example Company A has 2 kinds of fees it charges it customer's: a platform fee that is billed one year in advance for $10,000 & a support fee that is billed every month for $500. Parent Contract: Sub-Contract: Platform Fee Contract Fixed Fee Plan : Platform Amount: $10,000 / year Billing Frequency: 1Y advance Sub-Contract: Support Fee Contract Fixed Fee Plan : Support Amount: $500 / month Billing Frequency: 1M arrears Product Contract Product Contracts exist to create contract structures around products - they tie a product with its price and its usage. Display Name : The name of the Contract Product ID : The streamOS ID of the product that this contract is representing Tiers : Tiers the effective pricing schematic of the product Billing Frequency : Billing Frequency how the charges from this contract need to be billed Plans Plans are billable events in streamOS. They define amounts that need to be charged to the customer. They are operated upon by contracts to enforce how long and when. Plans are meant to be flexible, they can be created specific to each contract and applied or created as generic plans to be applied across your customer base. Fixed Fee Plans These are plans that have no variable component to them. Hence can be anything from a License Fee, Support Plan to a One Time Payment. Combined with contracts, they can be charged to the customer at different frequencies. Display Name : The name of the plan (this can be customer specific such as - Customer XX One Time Payment or generic - Enterprise Customer Platform Fee) Amount / period : The amount of the fee per period (Ex. $100 / month) Usage Based Plans These are plans that are tied with usage of a product. Usage Based Plans are linked to products via Product Contracts. PricingType : FLAT : The single price irrespective of usage STEPPED: Charged the price at the target volume RAMPED: Charged the price through tiers for qualifying tiers Tiers : | Min. Quantity | Max. Quantity | Rate | Accumulation Period : The duration of time over which usage needs to be totaled before the rate is calculated. Example: Min. Quantity Max. Quantity Rate 0 100 100 101 200 90 201 300 80 301 inf. 70 Scenario 1: Quantity 500, STEPPED = 500 * 70 = $35000 Scenario 2: Quantity 500, RAMPED = 100 * 100 + 100 * 90 + 100 * 80 + 200 * 70 = $41000 Modifiers Modifiers are called as such because they are called at the end of every contract run stage and affect the final output of a contract.Every modifier of a contract applies on the result of itself + all its sub-contracts and product contracts. Minimums This ensures that a minimum charge is billed to the customer irrespective of the amount billed by actual elements within the contract. Use minimums with contracts to specify period - per month / quarter / year / contract period. Look at Contract Examples for some creative ways. Display Name : Name the minimum Amount : The amount of the minimum Discounts Discount total billed to the customer. Look at Contract Examples for some creative ways. Display Name : Name the minimum Percentage : The percentage to be discounted Threshold : The number above which to apply the discount Credits Credits to be provided to the customer per contract. Display Name : Name Amount : The amount credit to be applied Expiry : When the credit expires in days from creation Renewals Renewals define behavior on contract expiry, it defines the period for which a contract is renewed and any rate increases. Billing Frequency Billing Frequency defines how charges generated in a contract are billed out. All charges within streamOS are pro-rated on a per day basis in the system - they are then grouped and added based on the billing frequency to generate and total to be charged. streamOS supports generating billing on a per day, per week, per month or per year basis. With an appropriate use of contracts and billing frequencies contracts can be billed at any day and frequency. Type : the offset to use to calculate the frequency : CALENDAR: all offsets are based of a calendar start date : CONTRACT: all offsets are based of a contract start date - of the associated contract Interval : The number of periods Frequency : 'D' for days, 'W' for weeks, 'M' for months, 'Y' for years (Interval:2 and Frequency: 'Y' = once every 2 years) anchor : Use the beginning or the end if each generated period eq : for periods with unequal days - equalize the amounts generated by them Example(s): Contract : ``` Start Date: 2024-11-26 End Date: 2025-11-26 Scenario 1: Type: CONTRACT Interval: 2 Frequency: 'M' anchor = 'S' Interpretation: Bill all charges generated by this contract every 2 months from the contract start at the beginning of each period Dates Generated: ['2024-11-26', '2025-01-26', '2025-03-26', '2025-05-26', '2025-07-26', '2025-09-26', '2025-11-26'] Scenario 2 Type: CALENDAR Interval: 2 Frequency: 'M' anchor = 'S' Interpretation: Bill all charges generated by this contract every 2 months from the calendar start at the beginning of each period Dates Generated: ['2024-11-01', '2025-01-01', '2025-03-01', '2025-05-01', '2025-07-01', '2025-09-01', '2025-11-01'] Notice the difference between the anchor dates - one anchors off the contract start and the other uses the closes calendar month of the contract. Please note that billing frequencies of contracts influence those of the contracts below them Contract Examples","title":"Contract Object"},{"location":"contracts/#contracts","text":"Contracts in streamOS are business logic elements that store financial logic of how to charge a customer.","title":"Contracts"},{"location":"contracts/#key-elements","text":"Contract Types Parent Contract Sub-Contract Product Contract Plans Fixed Fee Plans Usage Based Plans Modifiers Minimums Discounts Credits Renewals Billing Frequency Contract Examples","title":"Key Elements:"},{"location":"contracts/#contract-types","text":"Contracts in streamOS are containers that decide how billing elements (plans / modifiers) are charged (frequency) and how they interact with each other. They define dates (start, end, how often) and sequence, they do not define how much (these are handled by plans and modifiers)","title":"Contract Types"},{"location":"contracts/#parent-contract","text":"Parent Contracts are top level contracts that are directly linked with a customer. These are overarching concepts that are containers for all related elements and can action on all items below them. Any direct items associated with them are indicative of the fact that they will be charged just because the contract exists and for no other reason. A Parent Contract contains the following elements: Display Name : The Name of the Parent Contract - usually named something simple - 'Company A Master Agreement' Customer ID : The id of the customer associated with this contract Payment Terms : in days - translated directly to the accounting platform as issue_date + days Start Date : The Start Date of the contract End Date : The End Date of the contract Fixed Fees : [List of FixedFee] : Any fixed fees associated with this contract Minimums : [Minimum] Any minimums associated with this contract - (this will be applied after all charges are totaled) Discounts : [Discount] Any discounts that need to be applied after all the charges are totaled Auto-Renewals : [Auto-Renewal] Logic about renewal of the contract Sub-Contracts : [List of SubContract ] Sub-Contracts associated with this parent Billing Frequency : [Billing-Frequency] Specifies how all aspects of charges in this contract should be billed","title":"Parent Contract"},{"location":"contracts/#sub-contract","text":"Sub-Contracts are exactly like Parent Contracts except that they do not link to customer's and hence cannot live without a Parent Contract. They are useful concepts to separate units of billables by dates, billing frequencies or other behaviors. Sub-Contracts are infinitely nestable - meaning that a sub-contract can have infinite children, where each child is subject to the parent. Example Company A has 2 kinds of fees it charges it customer's: a platform fee that is billed one year in advance for $10,000 & a support fee that is billed every month for $500. Parent Contract: Sub-Contract: Platform Fee Contract Fixed Fee Plan : Platform Amount: $10,000 / year Billing Frequency: 1Y advance Sub-Contract: Support Fee Contract Fixed Fee Plan : Support Amount: $500 / month Billing Frequency: 1M arrears","title":"Sub-Contract"},{"location":"contracts/#product-contract","text":"Product Contracts exist to create contract structures around products - they tie a product with its price and its usage. Display Name : The name of the Contract Product ID : The streamOS ID of the product that this contract is representing Tiers : Tiers the effective pricing schematic of the product Billing Frequency : Billing Frequency how the charges from this contract need to be billed","title":"Product Contract"},{"location":"contracts/#plans","text":"Plans are billable events in streamOS. They define amounts that need to be charged to the customer. They are operated upon by contracts to enforce how long and when. Plans are meant to be flexible, they can be created specific to each contract and applied or created as generic plans to be applied across your customer base.","title":"Plans"},{"location":"contracts/#fixed-fee-plans","text":"These are plans that have no variable component to them. Hence can be anything from a License Fee, Support Plan to a One Time Payment. Combined with contracts, they can be charged to the customer at different frequencies. Display Name : The name of the plan (this can be customer specific such as - Customer XX One Time Payment or generic - Enterprise Customer Platform Fee) Amount / period : The amount of the fee per period (Ex. $100 / month)","title":"Fixed Fee Plans"},{"location":"contracts/#usage-based-plans","text":"These are plans that are tied with usage of a product. Usage Based Plans are linked to products via Product Contracts. PricingType : FLAT : The single price irrespective of usage STEPPED: Charged the price at the target volume RAMPED: Charged the price through tiers for qualifying tiers Tiers : | Min. Quantity | Max. Quantity | Rate | Accumulation Period : The duration of time over which usage needs to be totaled before the rate is calculated. Example: Min. Quantity Max. Quantity Rate 0 100 100 101 200 90 201 300 80 301 inf. 70 Scenario 1: Quantity 500, STEPPED = 500 * 70 = $35000 Scenario 2: Quantity 500, RAMPED = 100 * 100 + 100 * 90 + 100 * 80 + 200 * 70 = $41000","title":"Usage Based Plans"},{"location":"contracts/#modifiers","text":"Modifiers are called as such because they are called at the end of every contract run stage and affect the final output of a contract.Every modifier of a contract applies on the result of itself + all its sub-contracts and product contracts.","title":"Modifiers"},{"location":"contracts/#minimums","text":"This ensures that a minimum charge is billed to the customer irrespective of the amount billed by actual elements within the contract. Use minimums with contracts to specify period - per month / quarter / year / contract period. Look at Contract Examples for some creative ways. Display Name : Name the minimum Amount : The amount of the minimum","title":"Minimums"},{"location":"contracts/#discounts","text":"Discount total billed to the customer. Look at Contract Examples for some creative ways. Display Name : Name the minimum Percentage : The percentage to be discounted Threshold : The number above which to apply the discount","title":"Discounts"},{"location":"contracts/#credits","text":"Credits to be provided to the customer per contract. Display Name : Name Amount : The amount credit to be applied Expiry : When the credit expires in days from creation","title":"Credits"},{"location":"contracts/#renewals","text":"Renewals define behavior on contract expiry, it defines the period for which a contract is renewed and any rate increases.","title":"Renewals"},{"location":"contracts/#billing-frequency","text":"Billing Frequency defines how charges generated in a contract are billed out. All charges within streamOS are pro-rated on a per day basis in the system - they are then grouped and added based on the billing frequency to generate and total to be charged. streamOS supports generating billing on a per day, per week, per month or per year basis. With an appropriate use of contracts and billing frequencies contracts can be billed at any day and frequency. Type : the offset to use to calculate the frequency : CALENDAR: all offsets are based of a calendar start date : CONTRACT: all offsets are based of a contract start date - of the associated contract Interval : The number of periods Frequency : 'D' for days, 'W' for weeks, 'M' for months, 'Y' for years (Interval:2 and Frequency: 'Y' = once every 2 years) anchor : Use the beginning or the end if each generated period eq : for periods with unequal days - equalize the amounts generated by them Example(s): Contract : ``` Start Date: 2024-11-26 End Date: 2025-11-26 Scenario 1: Type: CONTRACT Interval: 2 Frequency: 'M' anchor = 'S' Interpretation: Bill all charges generated by this contract every 2 months from the contract start at the beginning of each period Dates Generated: ['2024-11-26', '2025-01-26', '2025-03-26', '2025-05-26', '2025-07-26', '2025-09-26', '2025-11-26'] Scenario 2 Type: CALENDAR Interval: 2 Frequency: 'M' anchor = 'S' Interpretation: Bill all charges generated by this contract every 2 months from the calendar start at the beginning of each period Dates Generated: ['2024-11-01', '2025-01-01', '2025-03-01', '2025-05-01', '2025-07-01', '2025-09-01', '2025-11-01'] Notice the difference between the anchor dates - one anchors off the contract start and the other uses the closes calendar month of the contract. Please note that billing frequencies of contracts influence those of the contracts below them","title":"Billing Frequency"},{"location":"contracts/#contract-examples","text":"","title":"Contract Examples"},{"location":"customer/","text":"Customer Information about your customer - existing or new. streamOS takes care of creating/reconciling this customer with existing customers on your accounting platform, ensuring alignment with your accounting practices and approval workflows. The Customer Object: Essential Information Customer Id : The streamOS Id associated with the customer Customer Name : The name of the customer (Required) Customer Email : The email of the customer (Required) Accounting Specific Information (Optional - depending on your accounting practices) Contact Name : Name of the contact person at the customer Phone Number : Phone number of the contact person Currency Code : Currency Code associated with the customer Notes : Additional notes that you would like to register Address : Type : billing / shipping / po_bo /unknown Address1 : First line of the address Address2 : Second line of the address City : City Region : State Postal Code","title":"Customer Object"},{"location":"customer/#customer","text":"Information about your customer - existing or new. streamOS takes care of creating/reconciling this customer with existing customers on your accounting platform, ensuring alignment with your accounting practices and approval workflows.","title":"Customer"},{"location":"customer/#the-customer-object","text":"","title":"The Customer Object:"},{"location":"customer/#essential-information","text":"Customer Id : The streamOS Id associated with the customer Customer Name : The name of the customer (Required) Customer Email : The email of the customer (Required)","title":"Essential Information"},{"location":"customer/#accounting-specific-information-optional-depending-on-your-accounting-practices","text":"Contact Name : Name of the contact person at the customer Phone Number : Phone number of the contact person Currency Code : Currency Code associated with the customer Notes : Additional notes that you would like to register Address : Type : billing / shipping / po_bo /unknown Address1 : First line of the address Address2 : Second line of the address City : City Region : State Postal Code","title":"Accounting Specific Information (Optional - depending on your accounting practices)"},{"location":"faq/","text":"","title":"FAQ & How-To"},{"location":"integrations/","text":"","title":"Integrations"},{"location":"invoice/","text":"Invoice The invoice object is streamOS representation of an invoice, it represents all aspects of what will actually get translated into your accounting platform and seen by your customers. Many of the elements here are controlled by contract structures and definitions mentioned earlier in the document. Invoice Date: Generated by the system when the invoice is generated approved and sent to the accounting platform Due Date: Calculated based on the defined payment term in the contract streamOS Customer ID: The streamOS reference of the customer id Accounting Customer ID: The customer id from your accounting platform that references the same customer Line Item Description: The description that will reflect on your invoice Unit Amount: The unit amount of the charge that will reflect on your invoice Quantity: The quantity Total Amount: Unit Amount * Quantity streamOS Product Id: The reference to the item being charged (this could be an actual product or a plan like Fixed Fee) Accounting Product Id: The accounting reference to the same item - so the line item can be mapped to the appropriate account The linkage between the streamOS and Accounting ID's are done through reconciliation .","title":"Invoice Object"},{"location":"invoice/#invoice","text":"The invoice object is streamOS representation of an invoice, it represents all aspects of what will actually get translated into your accounting platform and seen by your customers. Many of the elements here are controlled by contract structures and definitions mentioned earlier in the document. Invoice Date: Generated by the system when the invoice is generated approved and sent to the accounting platform Due Date: Calculated based on the defined payment term in the contract streamOS Customer ID: The streamOS reference of the customer id Accounting Customer ID: The customer id from your accounting platform that references the same customer Line Item Description: The description that will reflect on your invoice Unit Amount: The unit amount of the charge that will reflect on your invoice Quantity: The quantity Total Amount: Unit Amount * Quantity streamOS Product Id: The reference to the item being charged (this could be an actual product or a plan like Fixed Fee) Accounting Product Id: The accounting reference to the same item - so the line item can be mapped to the appropriate account The linkage between the streamOS and Accounting ID's are done through reconciliation .","title":"Invoice"},{"location":"overview/","text":"Overview The system consists of the following: Customers : Contains everything related to your customers that streamOS requires + some that your accounting platform requires. Products : Deals with products / services that you provide + some information to manage for your accounting system. Contracts : Is the brain of the AR module, stores key contract logic and the magic that makes them work. Usage : Deals with quantities of products or services that are sold over time Invoice : streamOS' representation of an actual invoice, this is as close an approximation of what will be translated to your accounting platform and to your customers. Read through the rest of this guide or jump around as you see fit.","title":"Overview"},{"location":"overview/#overview","text":"The system consists of the following: Customers : Contains everything related to your customers that streamOS requires + some that your accounting platform requires. Products : Deals with products / services that you provide + some information to manage for your accounting system. Contracts : Is the brain of the AR module, stores key contract logic and the magic that makes them work. Usage : Deals with quantities of products or services that are sold over time Invoice : streamOS' representation of an actual invoice, this is as close an approximation of what will be translated to your accounting platform and to your customers. Read through the rest of this guide or jump around as you see fit.","title":"Overview"},{"location":"product/","text":"Product Products or services provided by your organization to your customers. Products is just a generic term used to mean anything that you provide \u2013 it could be a data point served to a client, the number of legal hours billed. The Product Object The Essential Information Product Name : A concise name for the product/service (REQUIRED) Description : A descriptive name for the product/service Unit Price : A default price for the product Additional Fields for accounting systems - (OPTIONAL - depending on your accounting best practices) you can either provide these here or we collect them from your accounting manager on reconciliation Asset Account Id : The id of the asset account associated with this product Code : The accounting code associated with this product Discount Account Id : The account Id associated with discounts on this product Item Id : The Id of the item type : Inventory / Non-Inventory","title":"Product Object"},{"location":"product/#product","text":"Products or services provided by your organization to your customers. Products is just a generic term used to mean anything that you provide \u2013 it could be a data point served to a client, the number of legal hours billed.","title":"Product"},{"location":"product/#the-product-object","text":"","title":"The Product Object"},{"location":"product/#the-essential-information","text":"Product Name : A concise name for the product/service (REQUIRED) Description : A descriptive name for the product/service Unit Price : A default price for the product","title":"The Essential Information"},{"location":"product/#additional-fields-for-accounting-systems-optional-depending-on-your-accounting-best-practices","text":"you can either provide these here or we collect them from your accounting manager on reconciliation Asset Account Id : The id of the asset account associated with this product Code : The accounting code associated with this product Discount Account Id : The account Id associated with discounts on this product Item Id : The Id of the item type : Inventory / Non-Inventory","title":"Additional Fields for accounting systems - (OPTIONAL - depending on your accounting best practices)"},{"location":"reconciliation/","text":"DETAILS COMING SOON ....","title":"Reconciliation"},{"location":"reconciliation/#details-coming-soon","text":"","title":"DETAILS COMING SOON ...."},{"location":"simulations/","text":"Simulations are currently available only for developer API users (Human users will have access to a user friendly version shortly, please stay up to date by following streamOS for product updates) How simulations are setup ? Running simulations Viewing Results How simluations are setup ? Simulation environments bootstrap with all contracts, customers and products from your production environment. The /sim endpoints are simulation events and perform the same work as described in other sections except that they do not store data in production and are ephemeral (state recycles around system restarts etc.). Although our systems are largely up, state will be reset around system upgrades and catastrophical updates (like AWS going down) Running simulations Running simulations are almost exactly like working in a production environment except for a few changes - Usage: do not upload usage as you would regularly to your usage endpoint - instead structure your usage dataframe and pass it directly in to the /run endpoint as referenced here Viewing Results Results of simulations are returned from here . This is a pandas.multiindex dataframe once unpacked - with column headers reflecting each level of the contract that produces results: index: datetime index of charges events columns: [Parent Contract Info] [Sub Contract Info] [total amount of parent] [Plan Info] [total amount of sub contract] [unit amount] [quantity] [total amount] The way to process this information is to unwrap columns at each level and process the remaining dataframe to inspect details of how the prices were created.","title":"Simulations"},{"location":"simulations/#how-simluations-are-setup","text":"Simulation environments bootstrap with all contracts, customers and products from your production environment. The /sim endpoints are simulation events and perform the same work as described in other sections except that they do not store data in production and are ephemeral (state recycles around system restarts etc.). Although our systems are largely up, state will be reset around system upgrades and catastrophical updates (like AWS going down)","title":"How simluations are setup ?"},{"location":"simulations/#running-simulations","text":"Running simulations are almost exactly like working in a production environment except for a few changes - Usage: do not upload usage as you would regularly to your usage endpoint - instead structure your usage dataframe and pass it directly in to the /run endpoint as referenced here","title":"Running simulations"},{"location":"simulations/#viewing-results","text":"Results of simulations are returned from here . This is a pandas.multiindex dataframe once unpacked - with column headers reflecting each level of the contract that produces results: index: datetime index of charges events columns: [Parent Contract Info] [Sub Contract Info] [total amount of parent] [Plan Info] [total amount of sub contract] [unit amount] [quantity] [total amount] The way to process this information is to unwrap columns at each level and process the remaining dataframe to inspect details of how the prices were created.","title":"Viewing Results"},{"location":"usage/","text":"Usage The Usage object is the store of actual usage of products and services of your organization. Usage is associated with a Product ( product_id ) and a ProductContract ( contract_id ) that wraps billing information about an instance of that product. The above structure allows for customers to record usage for their clients against multi use-cases under the same contract. Example Company A sells an Employee Verification Product to both Youtube and Google Voice. However, they have a contract with their parent Google and invoice them once. Parent Contract: Google Sub Contract: YouTube Product Contract: - contract_id: xxxxxx - product: Employee Verification (`product_id`: yyyyyy) Sub Contract: Google Voice Product Contract: - contract_id: aaaaaa - product: Employee Verification (`product_id`: yyyyyy) Their usage data would therefore look like: date contract_id product_id quantity 2024-1-1 xxxxxx yyyyyy 123 2024-1-1 aaaaaa yyyyyy 12 2024-1-2 xxxxxx yyyyyy 56 2024-1-3 xxxxxx yyyyyy 4 2024-1-3 aaaaaa yyyyyy 7 2024-1-4 xxxxxx yyyyyy 8 2024-1-5 aaaaaa yyyyyy 9 The above structure would reflect billables toward YouTube and Google Voice separately but would also allow roll-ups to the parent Google.","title":"Usage Object"},{"location":"usage/#usage","text":"The Usage object is the store of actual usage of products and services of your organization. Usage is associated with a Product ( product_id ) and a ProductContract ( contract_id ) that wraps billing information about an instance of that product. The above structure allows for customers to record usage for their clients against multi use-cases under the same contract. Example Company A sells an Employee Verification Product to both Youtube and Google Voice. However, they have a contract with their parent Google and invoice them once. Parent Contract: Google Sub Contract: YouTube Product Contract: - contract_id: xxxxxx - product: Employee Verification (`product_id`: yyyyyy) Sub Contract: Google Voice Product Contract: - contract_id: aaaaaa - product: Employee Verification (`product_id`: yyyyyy) Their usage data would therefore look like: date contract_id product_id quantity 2024-1-1 xxxxxx yyyyyy 123 2024-1-1 aaaaaa yyyyyy 12 2024-1-2 xxxxxx yyyyyy 56 2024-1-3 xxxxxx yyyyyy 4 2024-1-3 aaaaaa yyyyyy 7 2024-1-4 xxxxxx yyyyyy 8 2024-1-5 aaaaaa yyyyyy 9 The above structure would reflect billables toward YouTube and Google Voice separately but would also allow roll-ups to the parent Google.","title":"Usage"},{"location":"users/","text":"Users streamOS has a light weight user model. Operational User: Permissions to create items and events within the system (with approval). Creation events like contract,customer & product creation can be made by this user. However, all events need to be approved by a user with manager permissions before they become active. Operational Manager: All permissions of operational user + permissions to approve requests from operational users. NOTE: Operational Manager's cannot approve their own requests. Administrative User: Ability to setup changes in the system. Create new plan types that can be applied to other contracts. Administrative Manager: Approve permissions for requests by Administrative Users. As well as core system event such as setting up and managing integrations, users and other core system(s). Actions like final invoice approval, contract editing approval and other key functions are part of this users permissions.","title":"Users"},{"location":"users/#users","text":"streamOS has a light weight user model. Operational User: Permissions to create items and events within the system (with approval). Creation events like contract,customer & product creation can be made by this user. However, all events need to be approved by a user with manager permissions before they become active. Operational Manager: All permissions of operational user + permissions to approve requests from operational users. NOTE: Operational Manager's cannot approve their own requests. Administrative User: Ability to setup changes in the system. Create new plan types that can be applied to other contracts. Administrative Manager: Approve permissions for requests by Administrative Users. As well as core system event such as setting up and managing integrations, users and other core system(s). Actions like final invoice approval, contract editing approval and other key functions are part of this users permissions.","title":"Users"}]}